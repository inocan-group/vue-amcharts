(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{"0676":function(module,exports){module.exports=function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},"0d73":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(process){__webpack_require__.d(__webpack_exports__,"AElement",(function(){return AElement})),__webpack_require__.d(__webpack_exports__,"AnimateColorElement",(function(){return AnimateColorElement})),__webpack_require__.d(__webpack_exports__,"AnimateElement",(function(){return AnimateElement})),__webpack_require__.d(__webpack_exports__,"AnimateTransformElement",(function(){return AnimateTransformElement})),__webpack_require__.d(__webpack_exports__,"BoundingBox",(function(){return BoundingBox})),__webpack_require__.d(__webpack_exports__,"CB1",(function(){return CB1})),__webpack_require__.d(__webpack_exports__,"CB2",(function(){return CB2})),__webpack_require__.d(__webpack_exports__,"CB3",(function(){return CB3})),__webpack_require__.d(__webpack_exports__,"CB4",(function(){return CB4})),__webpack_require__.d(__webpack_exports__,"Canvg",(function(){return Canvg})),__webpack_require__.d(__webpack_exports__,"CircleElement",(function(){return CircleElement})),__webpack_require__.d(__webpack_exports__,"ClipPathElement",(function(){return ClipPathElement})),__webpack_require__.d(__webpack_exports__,"DefsElement",(function(){return DefsElement})),__webpack_require__.d(__webpack_exports__,"DescElement",(function(){return DescElement})),__webpack_require__.d(__webpack_exports__,"Document",(function(){return Document})),__webpack_require__.d(__webpack_exports__,"Element",(function(){return Element})),__webpack_require__.d(__webpack_exports__,"EllipseElement",(function(){return EllipseElement})),__webpack_require__.d(__webpack_exports__,"FeColorMatrixElement",(function(){return FeColorMatrixElement})),__webpack_require__.d(__webpack_exports__,"FeCompositeElement",(function(){return FeCompositeElement})),__webpack_require__.d(__webpack_exports__,"FeDropShadowElement",(function(){return FeDropShadowElement})),__webpack_require__.d(__webpack_exports__,"FeGaussianBlurElement",(function(){return FeGaussianBlurElement})),__webpack_require__.d(__webpack_exports__,"FeMorphologyElement",(function(){return FeMorphologyElement})),__webpack_require__.d(__webpack_exports__,"FilterElement",(function(){return FilterElement})),__webpack_require__.d(__webpack_exports__,"Font",(function(){return Font})),__webpack_require__.d(__webpack_exports__,"FontElement",(function(){return FontElement})),__webpack_require__.d(__webpack_exports__,"FontFaceElement",(function(){return FontFaceElement})),__webpack_require__.d(__webpack_exports__,"GElement",(function(){return GElement})),__webpack_require__.d(__webpack_exports__,"GlyphElement",(function(){return GlyphElement})),__webpack_require__.d(__webpack_exports__,"GradientElement",(function(){return GradientElement})),__webpack_require__.d(__webpack_exports__,"ImageElement",(function(){return ImageElement})),__webpack_require__.d(__webpack_exports__,"LineElement",(function(){return LineElement})),__webpack_require__.d(__webpack_exports__,"LinearGradientElement",(function(){return LinearGradientElement})),__webpack_require__.d(__webpack_exports__,"MarkerElement",(function(){return MarkerElement})),__webpack_require__.d(__webpack_exports__,"MaskElement",(function(){return MaskElement})),__webpack_require__.d(__webpack_exports__,"Matrix",(function(){return Matrix})),__webpack_require__.d(__webpack_exports__,"MissingGlyphElement",(function(){return MissingGlyphElement})),__webpack_require__.d(__webpack_exports__,"Mouse",(function(){return Mouse})),__webpack_require__.d(__webpack_exports__,"PSEUDO_ZERO",(function(){return PSEUDO_ZERO})),__webpack_require__.d(__webpack_exports__,"Parser",(function(){return Parser})),__webpack_require__.d(__webpack_exports__,"PathElement",(function(){return PathElement})),__webpack_require__.d(__webpack_exports__,"PathParser",(function(){return PathParser})),__webpack_require__.d(__webpack_exports__,"PatternElement",(function(){return PatternElement})),__webpack_require__.d(__webpack_exports__,"Point",(function(){return Point})),__webpack_require__.d(__webpack_exports__,"PolygonElement",(function(){return PolygonElement})),__webpack_require__.d(__webpack_exports__,"PolylineElement",(function(){return PolylineElement})),__webpack_require__.d(__webpack_exports__,"Property",(function(){return Property})),__webpack_require__.d(__webpack_exports__,"QB1",(function(){return QB1})),__webpack_require__.d(__webpack_exports__,"QB2",(function(){return QB2})),__webpack_require__.d(__webpack_exports__,"QB3",(function(){return QB3})),__webpack_require__.d(__webpack_exports__,"RadialGradientElement",(function(){return RadialGradientElement})),__webpack_require__.d(__webpack_exports__,"RectElement",(function(){return RectElement})),__webpack_require__.d(__webpack_exports__,"RenderedElement",(function(){return RenderedElement})),__webpack_require__.d(__webpack_exports__,"Rotate",(function(){return Rotate})),__webpack_require__.d(__webpack_exports__,"SVGElement",(function(){return SVGElement})),__webpack_require__.d(__webpack_exports__,"SVGFontLoader",(function(){return SVGFontLoader})),__webpack_require__.d(__webpack_exports__,"Scale",(function(){return Scale})),__webpack_require__.d(__webpack_exports__,"Screen",(function(){return Screen})),__webpack_require__.d(__webpack_exports__,"Skew",(function(){return Skew})),__webpack_require__.d(__webpack_exports__,"SkewX",(function(){return SkewX})),__webpack_require__.d(__webpack_exports__,"SkewY",(function(){return SkewY})),__webpack_require__.d(__webpack_exports__,"StopElement",(function(){return StopElement})),__webpack_require__.d(__webpack_exports__,"StyleElement",(function(){return StyleElement})),__webpack_require__.d(__webpack_exports__,"SymbolElement",(function(){return SymbolElement})),__webpack_require__.d(__webpack_exports__,"TRefElement",(function(){return TRefElement})),__webpack_require__.d(__webpack_exports__,"TSpanElement",(function(){return TSpanElement})),__webpack_require__.d(__webpack_exports__,"TextElement",(function(){return TextElement})),__webpack_require__.d(__webpack_exports__,"TextPathElement",(function(){return TextPathElement})),__webpack_require__.d(__webpack_exports__,"TitleElement",(function(){return TitleElement})),__webpack_require__.d(__webpack_exports__,"Transform",(function(){return Transform})),__webpack_require__.d(__webpack_exports__,"Translate",(function(){return Translate})),__webpack_require__.d(__webpack_exports__,"UnknownElement",(function(){return UnknownElement})),__webpack_require__.d(__webpack_exports__,"UseElement",(function(){return UseElement})),__webpack_require__.d(__webpack_exports__,"ViewPort",(function(){return ViewPort})),__webpack_require__.d(__webpack_exports__,"compressSpaces",(function(){return compressSpaces})),__webpack_require__.d(__webpack_exports__,"getSelectorSpecificity",(function(){return getSelectorSpecificity})),__webpack_require__.d(__webpack_exports__,"normalizeAttributeName",(function(){return normalizeAttributeName})),__webpack_require__.d(__webpack_exports__,"normalizeColor",(function(){return normalizeColor})),__webpack_require__.d(__webpack_exports__,"parseExternalUrl",(function(){return parseExternalUrl})),__webpack_require__.d(__webpack_exports__,"presets",(function(){return index})),__webpack_require__.d(__webpack_exports__,"toNumbers",(function(){return toNumbers})),__webpack_require__.d(__webpack_exports__,"trimLeft",(function(){return trimLeft})),__webpack_require__.d(__webpack_exports__,"trimRight",(function(){return trimRight})),__webpack_require__.d(__webpack_exports__,"vectorMagnitude",(function(){return vectorMagnitude})),__webpack_require__.d(__webpack_exports__,"vectorsAngle",(function(){return vectorsAngle})),__webpack_require__.d(__webpack_exports__,"vectorsRatio",(function(){return vectorsRatio}));__webpack_require__("d81d"),__webpack_require__("ac1f"),__webpack_require__("466d"),__webpack_require__("5319"),__webpack_require__("2ca0"),__webpack_require__("a15b");var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("278c"),_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6__),_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14__=(__webpack_require__("a4d3"),__webpack_require__("4de4"),__webpack_require__("4160"),__webpack_require__("e439"),__webpack_require__("dbb4"),__webpack_require__("b64b"),__webpack_require__("159b"),__webpack_require__("a34a")),_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default=__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14__),_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__("c973"),_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_15___default=__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_15__),_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__("9523"),_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_16___default=__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_16__),_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__("970b"),_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default=__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17__),_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18__=__webpack_require__("5bc3"),_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default=__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18__),raf__WEBPACK_IMPORTED_MODULE_25__=(__webpack_require__("99af"),__webpack_require__("a623"),__webpack_require__("13d5"),__webpack_require__("d3b7"),__webpack_require__("e6cf"),__webpack_require__("1276"),__webpack_require__("c449")),raf__WEBPACK_IMPORTED_MODULE_25___default=__webpack_require__.n(raf__WEBPACK_IMPORTED_MODULE_25__),rgbcolor__WEBPACK_IMPORTED_MODULE_27__=(__webpack_require__("b0c0"),__webpack_require__("58e1")),rgbcolor__WEBPACK_IMPORTED_MODULE_27___default=__webpack_require__.n(rgbcolor__WEBPACK_IMPORTED_MODULE_27__),_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30__=(__webpack_require__("4ae1"),__webpack_require__("25f0"),__webpack_require__("6b58")),_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default=__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30__),_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31__=__webpack_require__("36c6"),_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default=__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31__),_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32__=__webpack_require__("ed6d"),_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default=__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32__),_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_39__=(__webpack_require__("a630"),__webpack_require__("caad"),__webpack_require__("45fc"),__webpack_require__("2532"),__webpack_require__("3ca3"),__webpack_require__("498a"),__webpack_require__("448a")),_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_39___default=__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_39__),_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_42__=(__webpack_require__("c975"),__webpack_require__("26e9"),__webpack_require__("8962")),_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_42___default=__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_42__),_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_46__=(__webpack_require__("a9e3"),__webpack_require__("cb29"),__webpack_require__("ac16"),__webpack_require__("3c96")),_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_46___default=__webpack_require__.n(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_46__),stackblur_canvas__WEBPACK_IMPORTED_MODULE_55__=(__webpack_require__("e260"),__webpack_require__("ddb0"),__webpack_require__("e01a"),__webpack_require__("d28b"),__webpack_require__("fb6a"),__webpack_require__("4ec9"),__webpack_require__("a6fd"),__webpack_require__("7f78"),__webpack_require__("5e9e"));function compressSpaces(str){return str.replace(/(?!\u3000)\s+/gm," ")}function trimLeft(str){return str.replace(/^[\n \t]+/,"")}function trimRight(str){return str.replace(/[\n \t]+$/,"")}function toNumbers(str){return((str||"").match(/-?(\d+(?:\.\d*(?:[eE][+-]?\d+)?)?|\.\d+)(?=\D|$)/gm)||[]).map(parseFloat)}var allUppercase=/^[A-Z-]+$/;function normalizeAttributeName(name){return allUppercase.test(name)?name.toLowerCase():name}function parseExternalUrl(url){var urlMatch=url.match(/url\(('([^']+)'|"([^"]+)"|([^'"\)]+))\)/)||[];return urlMatch[2]||urlMatch[3]||urlMatch[4]}function normalizeColor(color){if(!color.startsWith("rgb"))return color;var rgbParts=3;return color.replace(/\d+(\.\d+)?/g,(function(num,isFloat){return rgbParts--&&isFloat?String(Math.round(parseFloat(num))):num}))}var attributeRegex=/(\[[^\]]+\])/g,idRegex=/(#[^\s\+>~\.\[:]+)/g,classRegex=/(\.[^\s\+>~\.\[:]+)/g,pseudoElementRegex=/(::[^\s\+>~\.\[:]+|:first-line|:first-letter|:before|:after)/gi,pseudoClassWithBracketsRegex=/(:[\w-]+\([^\)]*\))/gi,pseudoClassRegex=/(:[^\s\+>~\.\[:]+)/g,elementRegex=/([^\s\+>~\.\[:]+)/g;function findSelectorMatch(selector,regex){var matches=selector.match(regex);return matches?[selector.replace(regex," "),matches.length]:[selector,0]}function getSelectorSpecificity(selector){var specificity=[0,0,0],currentSelector=selector.replace(/:not\(([^\)]*)\)/g,"     $1 ").replace(/{[\s\S]*/gm," "),delta=0,_findSelectorMatch=findSelectorMatch(currentSelector,attributeRegex),_findSelectorMatch2=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_findSelectorMatch,2);currentSelector=_findSelectorMatch2[0],delta=_findSelectorMatch2[1],specificity[1]+=delta;var _findSelectorMatch3=findSelectorMatch(currentSelector,idRegex),_findSelectorMatch4=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_findSelectorMatch3,2);currentSelector=_findSelectorMatch4[0],delta=_findSelectorMatch4[1],specificity[0]+=delta;var _findSelectorMatch5=findSelectorMatch(currentSelector,classRegex),_findSelectorMatch6=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_findSelectorMatch5,2);currentSelector=_findSelectorMatch6[0],delta=_findSelectorMatch6[1],specificity[1]+=delta;var _findSelectorMatch7=findSelectorMatch(currentSelector,pseudoElementRegex),_findSelectorMatch8=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_findSelectorMatch7,2);currentSelector=_findSelectorMatch8[0],delta=_findSelectorMatch8[1],specificity[2]+=delta;var _findSelectorMatch9=findSelectorMatch(currentSelector,pseudoClassWithBracketsRegex),_findSelectorMatch10=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_findSelectorMatch9,2);currentSelector=_findSelectorMatch10[0],delta=_findSelectorMatch10[1],specificity[1]+=delta;var _findSelectorMatch11=findSelectorMatch(currentSelector,pseudoClassRegex),_findSelectorMatch12=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_findSelectorMatch11,2);currentSelector=_findSelectorMatch12[0],delta=_findSelectorMatch12[1],specificity[1]+=delta;var _findSelectorMatch13=findSelectorMatch(currentSelector=currentSelector.replace(/[\*\s\+>~]/g," ").replace(/[#\.]/g," "),elementRegex),_findSelectorMatch14=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_findSelectorMatch13,2);return currentSelector=_findSelectorMatch14[0],delta=_findSelectorMatch14[1],specificity[2]+=delta,specificity.join("")}var PSEUDO_ZERO=1e-8;function vectorMagnitude(v){return Math.sqrt(Math.pow(v[0],2)+Math.pow(v[1],2))}function vectorsRatio(u,v){return(u[0]*v[0]+u[1]*v[1])/(vectorMagnitude(u)*vectorMagnitude(v))}function vectorsAngle(u,v){return(u[0]*v[1]<u[1]*v[0]?-1:1)*Math.acos(vectorsRatio(u,v))}function CB1(t){return t*t*t}function CB2(t){return 3*t*t*(1-t)}function CB3(t){return 3*t*(1-t)*(1-t)}function CB4(t){return(1-t)*(1-t)*(1-t)}function QB1(t){return t*t}function QB2(t){return 2*t*(1-t)}function QB3(t){return(1-t)*(1-t)}(function createCommonjsModule(fn,module){return fn(module={exports:{}},module.exports),module.exports})((function(module){var runtime=function(exports){var Op=Object.prototype,hasOwn=Op.hasOwnProperty,$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return generator._invoke=function makeInvokeMethod(innerFn,self,context){var state="suspendedStart";return function invoke(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult()}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg)}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done}}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg)}}}(innerFn,self,context),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};IteratorPrototype[iteratorSymbol]=function(){return this};var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach((function(method){prototype[method]=function(arg){return this._invoke(method,arg)}}))}function AsyncIterator(generator,PromiseImpl){var previousPromise;this._invoke=function enqueue(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl((function(resolve,reject){!function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==typeof value&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then((function(value){invoke("next",value,resolve,reject)}),(function(err){invoke("throw",err,resolve,reject)})):PromiseImpl.resolve(value).then((function(unwrapped){result.value=unwrapped,resolve(result)}),(function(error){return invoke("throw",error,resolve,reject)}))}reject(record.arg)}(method,arg,resolve,reject)}))}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}}function maybeInvokeDelegate(delegate,context){var method=delegate.iterator[context.method];if(void 0===method){if(context.delegate=null,"throw"===context.method){if(delegate.iterator.return&&(context.method="return",context.arg=void 0,maybeInvokeDelegate(delegate,context),"throw"===context.method))return ContinueSentinel;context.method="throw",context.arg=new TypeError("The iterator does not provide a 'throw' method")}return ContinueSentinel}var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=void 0),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel)}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0)}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=void 0,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:void 0,done:!0}}return GeneratorFunction.prototype=Gp.constructor=GeneratorFunctionPrototype,GeneratorFunctionPrototype.constructor=GeneratorFunction,GeneratorFunctionPrototype[toStringTagSymbol]=GeneratorFunction.displayName="GeneratorFunction",exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name))},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,toStringTagSymbol in genFun||(genFun[toStringTagSymbol]="GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun},exports.awrap=function(arg){return{__await:arg}},defineIteratorMethods(AsyncIterator.prototype),AsyncIterator.prototype[asyncIteratorSymbol]=function(){return this},exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then((function(result){return result.done?result.value:iter.next()}))},defineIteratorMethods(Gp),Gp[toStringTagSymbol]="Generator",Gp[iteratorSymbol]=function(){return this},Gp.toString=function(){return"[object Generator]"},exports.keys=function(object){var keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},exports.values=values,Context.prototype={constructor:Context,reset:function(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=void 0)},stop:function(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=void 0),!!caught}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0)}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}}},abrupt:function(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record)},complete:function(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel},finish:function(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel}},catch:function(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}}throw new Error("illegal catch attempt")},delegateYield:function(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=void 0),ContinueSentinel}},exports}(module.exports);try{regeneratorRuntime=runtime}catch(accidentalStrictMode){Function("r","regeneratorRuntime = r")(runtime)}}));var Property=function(){function Property(document,name,value){_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,Property),this.document=document,this.name=name,this.value=value,this.isNormalizedColor=!1}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(Property,[{key:"hasValue",value:function hasValue(){var value=this.value;return null!==value&&""!==value&&0!==value&&void 0!==value}},{key:"isString",value:function isString(regexp){var value=this.value,result="string"==typeof value;return result&&regexp?regexp.test(value):result}},{key:"isUrlDefinition",value:function isUrlDefinition(){return this.isString(/^url\(/)}},{key:"isPixels",value:function isPixels(){if(!this.hasValue())return!1;var asString=this.getString();switch(!0){case/px$/.test(asString):case/^[0-9]+$/.test(asString):return!0;default:return!1}}},{key:"setValue",value:function setValue(value){return this.value=value,this}},{key:"getValue",value:function getValue(def){return void 0===def||this.hasValue()?this.value:def}},{key:"getNumber",value:function getNumber(def){if(!this.hasValue())return void 0===def?0:parseFloat(def);var value=this.value,n=parseFloat(value);return this.isString(/%$/)&&(n/=100),n}},{key:"getString",value:function getString(def){return void 0===def||this.hasValue()?void 0===this.value?"":String(this.value):String(def)}},{key:"getColor",value:function getColor(def){var color=this.getString(def);return this.isNormalizedColor||(this.isNormalizedColor=!0,color=normalizeColor(color),this.value=color),color}},{key:"getDpi",value:function getDpi(){return 96}},{key:"getRem",value:function getRem(){return this.document.rootEmSize}},{key:"getEm",value:function getEm(){return this.document.emSize}},{key:"getUnits",value:function getUnits(){return this.getString().replace(/[0-9\.\-]/g,"")}},{key:"getPixels",value:function getPixels(axisOrIsFontSize){var processPercent=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this.hasValue())return 0;var _ref="boolean"==typeof axisOrIsFontSize?[void 0,axisOrIsFontSize]:[axisOrIsFontSize],_ref2=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_ref,2),axis=_ref2[0],isFontSize=_ref2[1],viewPort=this.document.screen.viewPort;switch(!0){case this.isString(/vmin$/):return this.getNumber()/100*Math.min(viewPort.computeSize("x"),viewPort.computeSize("y"));case this.isString(/vmax$/):return this.getNumber()/100*Math.max(viewPort.computeSize("x"),viewPort.computeSize("y"));case this.isString(/vw$/):return this.getNumber()/100*viewPort.computeSize("x");case this.isString(/vh$/):return this.getNumber()/100*viewPort.computeSize("y");case this.isString(/rem$/):return this.getNumber()*this.getRem();case this.isString(/em$/):return this.getNumber()*this.getEm();case this.isString(/ex$/):return this.getNumber()*this.getEm()/2;case this.isString(/px$/):return this.getNumber();case this.isString(/pt$/):return this.getNumber()*this.getDpi()*(1/72);case this.isString(/pc$/):return 15*this.getNumber();case this.isString(/cm$/):return this.getNumber()*this.getDpi()/2.54;case this.isString(/mm$/):return this.getNumber()*this.getDpi()/25.4;case this.isString(/in$/):return this.getNumber()*this.getDpi();case this.isString(/%$/)&&isFontSize:return this.getNumber()*this.getEm();case this.isString(/%$/):return this.getNumber()*viewPort.computeSize(axis);default:var n=this.getNumber();return processPercent&&n<1?n*viewPort.computeSize(axis):n}}},{key:"getMilliseconds",value:function getMilliseconds(){return this.hasValue()?this.isString(/ms$/)?this.getNumber():1e3*this.getNumber():0}},{key:"getRadians",value:function getRadians(){if(!this.hasValue())return 0;switch(!0){case this.isString(/deg$/):return this.getNumber()*(Math.PI/180);case this.isString(/grad$/):return this.getNumber()*(Math.PI/200);case this.isString(/rad$/):return this.getNumber();default:return this.getNumber()*(Math.PI/180)}}},{key:"getDefinition",value:function getDefinition(){var asString=this.getString(),name=asString.match(/#([^\)'"]+)/);return name&&(name=name[1]),name||(name=asString),this.document.definitions[name]}},{key:"getFillStyleDefinition",value:function getFillStyleDefinition(element,opacity){var def=this.getDefinition();if(!def)return null;if("function"==typeof def.createGradient)return def.createGradient(this.document.ctx,element,opacity);if("function"==typeof def.createPattern){if(def.getHrefAttribute().hasValue()){var patternTransform=def.getAttribute("patternTransform");def=def.getHrefAttribute().getDefinition(),patternTransform.hasValue()&&def.getAttribute("patternTransform",!0).setValue(patternTransform.value)}return def.createPattern(this.document.ctx,element,opacity)}return null}},{key:"getTextBaseline",value:function getTextBaseline(){return this.hasValue()?Property.textBaselineMapping[this.getString()]:null}},{key:"addOpacity",value:function addOpacity(opacity){for(var value=this.getColor(),len=value.length,commas=0,i=0;i<len&&(","===value[i]&&commas++,3!==commas);i++);if(opacity.hasValue()&&this.isString()&&3!==commas){var color=new rgbcolor__WEBPACK_IMPORTED_MODULE_27___default.a(value);color.ok&&(color.alpha=opacity.getNumber(),value=color.toRGBA())}return new Property(this.document,this.name,value)}}],[{key:"empty",value:function empty(document){return new Property(document,"EMPTY","")}}]),Property}();Property.textBaselineMapping={baseline:"alphabetic","before-edge":"top","text-before-edge":"top",middle:"middle",central:"middle","after-edge":"bottom","text-after-edge":"bottom",ideographic:"ideographic",alphabetic:"alphabetic",hanging:"hanging",mathematical:"alphabetic"};var ViewPort=function(){function ViewPort(){_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,ViewPort),this.viewPorts=[]}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(ViewPort,[{key:"clear",value:function clear(){this.viewPorts=[]}},{key:"setCurrent",value:function setCurrent(width,height){this.viewPorts.push({width:width,height:height})}},{key:"removeCurrent",value:function removeCurrent(){this.viewPorts.pop()}},{key:"getCurrent",value:function getCurrent(){var viewPorts=this.viewPorts;return viewPorts[viewPorts.length-1]}},{key:"computeSize",value:function computeSize(d){return"number"==typeof d?d:"x"===d?this.width:"y"===d?this.height:Math.sqrt(Math.pow(this.width,2)+Math.pow(this.height,2))/Math.sqrt(2)}},{key:"width",get:function get(){return this.getCurrent().width}},{key:"height",get:function get(){return this.getCurrent().height}}]),ViewPort}(),Point=function(){function Point(x,y){_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,Point),this.x=x,this.y=y}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(Point,[{key:"angleTo",value:function angleTo(point){return Math.atan2(point.y-this.y,point.x-this.x)}},{key:"applyTransform",value:function applyTransform(transform){var x=this.x,y=this.y,xp=x*transform[0]+y*transform[2]+transform[4],yp=x*transform[1]+y*transform[3]+transform[5];this.x=xp,this.y=yp}}],[{key:"parse",value:function parse(point){var defaultValue=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,_toNumbers=toNumbers(point),_toNumbers2=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_toNumbers,2),_toNumbers2$=_toNumbers2[0],x=void 0===_toNumbers2$?defaultValue:_toNumbers2$,_toNumbers2$2=_toNumbers2[1],y=void 0===_toNumbers2$2?defaultValue:_toNumbers2$2;return new Point(x,y)}},{key:"parseScale",value:function parseScale(scale){var defaultValue=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,_toNumbers3=toNumbers(scale),_toNumbers4=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_toNumbers3,2),_toNumbers4$=_toNumbers4[0],x=void 0===_toNumbers4$?defaultValue:_toNumbers4$,_toNumbers4$2=_toNumbers4[1],y=void 0===_toNumbers4$2?x:_toNumbers4$2;return new Point(x,y)}},{key:"parsePath",value:function parsePath(path){for(var points=toNumbers(path),len=points.length,pathPoints=[],i=0;i<len;i+=2)pathPoints.push(new Point(points[i],points[i+1]));return pathPoints}}]),Point}(),Mouse=function(){function Mouse(screen){_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,Mouse),this.screen=screen,this.working=!1,this.events=[],this.eventElements=[],this.onClick=this.onClick.bind(this),this.onMouseMove=this.onMouseMove.bind(this)}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(Mouse,[{key:"isWorking",value:function isWorking(){return this.working}},{key:"start",value:function start(){if(!this.working){var screen=this.screen,onClick=this.onClick,onMouseMove=this.onMouseMove,canvas=screen.ctx.canvas;canvas.onclick=onClick,canvas.onmousemove=onMouseMove,this.working=!0}}},{key:"stop",value:function stop(){if(this.working){var canvas=this.screen.ctx.canvas;this.working=!1,canvas.onclick=null,canvas.onmousemove=null}}},{key:"hasEvents",value:function hasEvents(){return this.working&&this.events.length>0}},{key:"runEvents",value:function runEvents(){if(this.working){var document=this.screen,events=this.events,eventElements=this.eventElements,style=document.ctx.canvas.style;style&&(style.cursor=""),events.forEach((function(_ref,i){for(var run=_ref.run,element=eventElements[i];element;)run(element),element=element.parent})),this.events=[],this.eventElements=[]}}},{key:"checkPath",value:function checkPath(element,ctx){if(this.working&&ctx){var events=this.events,eventElements=this.eventElements;events.forEach((function(_ref2,i){var x=_ref2.x,y=_ref2.y;!eventElements[i]&&ctx.isPointInPath&&ctx.isPointInPath(x,y)&&(eventElements[i]=element)}))}}},{key:"checkBoundingBox",value:function checkBoundingBox(element,boundingBox){if(this.working&&boundingBox){var events=this.events,eventElements=this.eventElements;events.forEach((function(_ref3,i){var x=_ref3.x,y=_ref3.y;!eventElements[i]&&boundingBox.isPointInBox(x,y)&&(eventElements[i]=element)}))}}},{key:"mapXY",value:function mapXY(x,y){for(var _this$screen=this.screen,window=_this$screen.window,ctx=_this$screen.ctx,point=new Point(x,y),element=ctx.canvas;element;)point.x-=element.offsetLeft,point.y-=element.offsetTop,element=element.offsetParent;return window.scrollX&&(point.x+=window.scrollX),window.scrollY&&(point.y+=window.scrollY),point}},{key:"onClick",value:function onClick(evt){var _this$mapXY=this.mapXY((evt||event).clientX,(evt||event).clientY),x=_this$mapXY.x,y=_this$mapXY.y;this.events.push({type:"onclick",x:x,y:y,run:function run(event){event.onClick&&event.onClick()}})}},{key:"onMouseMove",value:function onMouseMove(evt){var _this$mapXY2=this.mapXY((evt||event).clientX,(evt||event).clientY),x=_this$mapXY2.x,y=_this$mapXY2.y;this.events.push({type:"onmousemove",x:x,y:y,run:function run(event){event.onMouseMove&&event.onMouseMove()}})}}]),Mouse}(),defaultWindow="undefined"!=typeof window?window:null,defaultFetch="undefined"!=typeof fetch?fetch.bind(void 0):null,Screen=function(){function Screen(ctx){var _ref=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_ref$fetch=_ref.fetch,fetch=void 0===_ref$fetch?defaultFetch:_ref$fetch,_ref$window=_ref.window,window=void 0===_ref$window?defaultWindow:_ref$window;_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,Screen),this.ctx=ctx,this.FRAMERATE=30,this.MAX_VIRTUAL_PIXELS=3e4,this.CLIENT_WIDTH=800,this.CLIENT_HEIGHT=600,this.viewPort=new ViewPort,this.mouse=new Mouse(this),this.animations=[],this.waits=[],this.frameDuration=0,this.isReadyLock=!1,this.isFirstRender=!0,this.intervalId=null,this.window=window,this.fetch=fetch}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(Screen,[{key:"wait",value:function wait(checker){this.waits.push(checker)}},{key:"ready",value:function ready(){return this.readyPromise?this.readyPromise:Promise.resolve()}},{key:"isReady",value:function isReady(){if(this.isReadyLock)return!0;var isReadyLock=this.waits.every((function(_){return _()}));return isReadyLock&&(this.waits=[],this.resolveReady&&this.resolveReady()),this.isReadyLock=isReadyLock,isReadyLock}},{key:"setDefaults",value:function setDefaults(ctx){ctx.strokeStyle="rgba(0,0,0,0)",ctx.lineCap="butt",ctx.lineJoin="miter",ctx.miterLimit=4}},{key:"setViewBox",value:function setViewBox(_ref2){var document=_ref2.document,ctx=_ref2.ctx,aspectRatio=_ref2.aspectRatio,width=_ref2.width,desiredWidth=_ref2.desiredWidth,height=_ref2.height,desiredHeight=_ref2.desiredHeight,_ref2$minX=_ref2.minX,minX=void 0===_ref2$minX?0:_ref2$minX,_ref2$minY=_ref2.minY,minY=void 0===_ref2$minY?0:_ref2$minY,refX=_ref2.refX,refY=_ref2.refY,_ref2$clip=_ref2.clip,clip=void 0!==_ref2$clip&&_ref2$clip,_ref2$clipX=_ref2.clipX,clipX=void 0===_ref2$clipX?0:_ref2$clipX,_ref2$clipY=_ref2.clipY,clipY=void 0===_ref2$clipY?0:_ref2$clipY,_cleanAspectRatio$spl=compressSpaces(aspectRatio).replace(/^defer\s/,"").split(" "),_cleanAspectRatio$spl2=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_cleanAspectRatio$spl,2),align=_cleanAspectRatio$spl2[0]||"xMidYMid",meetOrSlice=_cleanAspectRatio$spl2[1]||"meet",scaleX=width/desiredWidth,scaleY=height/desiredHeight,scaleMin=Math.min(scaleX,scaleY),scaleMax=Math.max(scaleX,scaleY),finalDesiredWidth=desiredWidth,finalDesiredHeight=desiredHeight;"meet"===meetOrSlice&&(finalDesiredWidth*=scaleMin,finalDesiredHeight*=scaleMin),"slice"===meetOrSlice&&(finalDesiredWidth*=scaleMax,finalDesiredHeight*=scaleMax);var refXProp=new Property(document,"refX",refX),refYProp=new Property(document,"refY",refY),hasRefs=refXProp.hasValue()&&refYProp.hasValue();if(hasRefs&&ctx.translate(-scaleMin*refXProp.getPixels("x"),-scaleMin*refYProp.getPixels("y")),clip){var scaledClipX=scaleMin*clipX,scaledClipY=scaleMin*clipY;ctx.beginPath(),ctx.moveTo(scaledClipX,scaledClipY),ctx.lineTo(width,scaledClipY),ctx.lineTo(width,height),ctx.lineTo(scaledClipX,height),ctx.closePath(),ctx.clip()}if(!hasRefs){var isMeetMinY="meet"===meetOrSlice&&scaleMin===scaleY,isSliceMaxY="slice"===meetOrSlice&&scaleMax===scaleY,isMeetMinX="meet"===meetOrSlice&&scaleMin===scaleX,isSliceMaxX="slice"===meetOrSlice&&scaleMax===scaleX;/^xMid/.test(align)&&(isMeetMinY||isSliceMaxY)&&ctx.translate(width/2-finalDesiredWidth/2,0),/YMid$/.test(align)&&(isMeetMinX||isSliceMaxX)&&ctx.translate(0,height/2-finalDesiredHeight/2),/^xMax/.test(align)&&(isMeetMinY||isSliceMaxY)&&ctx.translate(width-finalDesiredWidth,0),/YMax$/.test(align)&&(isMeetMinX||isSliceMaxX)&&ctx.translate(0,height-finalDesiredHeight)}switch(!0){case"none"===align:ctx.scale(scaleX,scaleY);break;case"meet"===meetOrSlice:ctx.scale(scaleMin,scaleMin);break;case"slice"===meetOrSlice:ctx.scale(scaleMax,scaleMax)}ctx.translate(-minX,-minY)}},{key:"start",value:function start(element){var _this=this,_ref3=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_ref3$enableRedraw=_ref3.enableRedraw,enableRedraw=void 0!==_ref3$enableRedraw&&_ref3$enableRedraw,_ref3$ignoreMouse=_ref3.ignoreMouse,ignoreMouse=void 0!==_ref3$ignoreMouse&&_ref3$ignoreMouse,_ref3$ignoreAnimation=_ref3.ignoreAnimation,ignoreAnimation=void 0!==_ref3$ignoreAnimation&&_ref3$ignoreAnimation,_ref3$ignoreDimension=_ref3.ignoreDimensions,ignoreDimensions=void 0!==_ref3$ignoreDimension&&_ref3$ignoreDimension,_ref3$ignoreClear=_ref3.ignoreClear,ignoreClear=void 0!==_ref3$ignoreClear&&_ref3$ignoreClear,forceRedraw=_ref3.forceRedraw,scaleWidth=_ref3.scaleWidth,scaleHeight=_ref3.scaleHeight,offsetX=_ref3.offsetX,offsetY=_ref3.offsetY,FRAMERATE=this.FRAMERATE,mouse=this.mouse,frameDuration=1e3/FRAMERATE;if(this.frameDuration=frameDuration,this.readyPromise=new Promise((function(resolve){_this.resolveReady=resolve})),this.isReady()&&this.render(element,ignoreDimensions,ignoreClear,scaleWidth,scaleHeight,offsetX,offsetY),enableRedraw){var now=Date.now(),then=now,delta=0,tick=function tick(){now=Date.now(),(delta=now-then)>=frameDuration&&(then=now-delta%frameDuration,_this.shouldUpdate(ignoreAnimation,forceRedraw)&&(_this.render(element,ignoreDimensions,ignoreClear,scaleWidth,scaleHeight,offsetX,offsetY),mouse.runEvents())),_this.intervalId=raf__WEBPACK_IMPORTED_MODULE_25___default()(tick)};ignoreMouse||mouse.start(),this.intervalId=raf__WEBPACK_IMPORTED_MODULE_25___default()(tick)}}},{key:"stop",value:function stop(){this.intervalId&&(raf__WEBPACK_IMPORTED_MODULE_25___default.a.cancel(this.intervalId),this.intervalId=null),this.mouse.stop()}},{key:"shouldUpdate",value:function shouldUpdate(ignoreAnimation,forceRedraw){if(!ignoreAnimation){var frameDuration=this.frameDuration,shouldUpdate=this.animations.reduce((function(shouldUpdate,animation){return animation.update(frameDuration)||shouldUpdate}),!1);if(shouldUpdate)return!0}return!("function"!=typeof forceRedraw||!forceRedraw())||(!(this.isReadyLock||!this.isReady())||!!this.mouse.hasEvents())}},{key:"render",value:function render(element,ignoreDimensions,ignoreClear,scaleWidth,scaleHeight,offsetX,offsetY){var CLIENT_WIDTH=this.CLIENT_WIDTH,CLIENT_HEIGHT=this.CLIENT_HEIGHT,viewPort=this.viewPort,ctx=this.ctx,isFirstRender=this.isFirstRender,canvas=ctx.canvas;viewPort.clear(),canvas.width&&canvas.height?viewPort.setCurrent(canvas.width,canvas.height):viewPort.setCurrent(CLIENT_WIDTH,CLIENT_HEIGHT);var widthStyle=element.getStyle("width"),heightStyle=element.getStyle("height");!ignoreDimensions&&(isFirstRender||"number"!=typeof scaleWidth&&"number"!=typeof scaleHeight)&&(widthStyle.hasValue()&&(canvas.width=widthStyle.getPixels("x"),canvas.style&&(canvas.style.width="".concat(canvas.width,"px"))),heightStyle.hasValue()&&(canvas.height=heightStyle.getPixels("y"),canvas.style&&(canvas.style.height="".concat(canvas.height,"px"))));var cWidth=canvas.clientWidth||canvas.width,cHeight=canvas.clientHeight||canvas.height;if(ignoreDimensions&&widthStyle.hasValue()&&heightStyle.hasValue()&&(cWidth=widthStyle.getPixels("x"),cHeight=heightStyle.getPixels("y")),viewPort.setCurrent(cWidth,cHeight),"number"==typeof offsetX&&element.getAttribute("x",!0).setValue(offsetX),"number"==typeof offsetY&&element.getAttribute("y",!0).setValue(offsetY),"number"==typeof scaleWidth||"number"==typeof scaleHeight){var viewBox=toNumbers(element.getAttribute("viewBox").getString()),xRatio=0,yRatio=0;if("number"==typeof scaleWidth){var _widthStyle=element.getStyle("width");_widthStyle.hasValue()?xRatio=_widthStyle.getPixels("x")/scaleWidth:isNaN(viewBox[2])||(xRatio=viewBox[2]/scaleWidth)}if("number"==typeof scaleHeight){var _heightStyle=element.getStyle("height");_heightStyle.hasValue()?yRatio=_heightStyle.getPixels("y")/scaleHeight:isNaN(viewBox[3])||(yRatio=viewBox[3]/scaleHeight)}xRatio||(xRatio=yRatio),yRatio||(yRatio=xRatio),element.getAttribute("width",!0).setValue(scaleWidth),element.getAttribute("height",!0).setValue(scaleHeight);var transformStyle=element.getStyle("transform",!0,!0);transformStyle.setValue("".concat(transformStyle.getString()," scale(").concat(1/xRatio,", ").concat(1/yRatio,")"))}ignoreClear||ctx.clearRect(0,0,cWidth,cHeight),element.render(ctx),isFirstRender&&(this.isFirstRender=!1)}}]),Screen}();Screen.defaultWindow=defaultWindow,Screen.defaultFetch=defaultFetch;var defaultFetch$1=Screen.defaultFetch,DefaultDOMParser="undefined"!=typeof DOMParser?DOMParser:null,Parser=function(){function Parser(){var _ref=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},_ref$fetch=_ref.fetch,fetch=void 0===_ref$fetch?defaultFetch$1:_ref$fetch,_ref$DOMParser=_ref.DOMParser,DOMParser=void 0===_ref$DOMParser?DefaultDOMParser:_ref$DOMParser;_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,Parser),this.fetch=fetch,this.DOMParser=DOMParser}var _load,_parse;return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(Parser,[{key:"parse",value:(_parse=_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_15___default()(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.mark((function _callee(resource){return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:if(!/^</.test(resource)){_context.next=2;break}return _context.abrupt("return",this.parseFromString(resource));case 2:return _context.abrupt("return",this.load(resource));case 3:case"end":return _context.stop()}}),_callee,this)}))),function parse(_x){return _parse.apply(this,arguments)})},{key:"parseFromString",value:function parseFromString(xml){var parser=new this.DOMParser;try{return this.checkDocument(parser.parseFromString(xml,"image/svg+xml"))}catch(err){return this.checkDocument(parser.parseFromString(xml,"text/xml"))}}},{key:"checkDocument",value:function checkDocument(document){var parserError=document.getElementsByTagName("parsererror")[0];if(parserError)throw new Error(parserError.textContent);return document}},{key:"load",value:(_load=_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_15___default()(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.mark((function _callee2(url){var response,xml;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:return _context2.next=2,this.fetch(url);case 2:return response=_context2.sent,_context2.next=5,response.text();case 5:return xml=_context2.sent,_context2.abrupt("return",this.parseFromString(xml));case 7:case"end":return _context2.stop()}}),_callee2,this)}))),function load(_x2){return _load.apply(this,arguments)})}]),Parser}(),Translate=function(){function Translate(_,point){_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,Translate),this.type="translate",this.point=null,this.point=Point.parse(point)}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(Translate,[{key:"apply",value:function apply(ctx){var _this$point=this.point,x=_this$point.x,y=_this$point.y;ctx.translate(x||0,y||0)}},{key:"unapply",value:function unapply(ctx){var _this$point2=this.point,x=_this$point2.x,y=_this$point2.y;ctx.translate(-1*x||0,-1*y||0)}},{key:"applyToPoint",value:function applyToPoint(point){var _this$point3=this.point,x=_this$point3.x,y=_this$point3.y;point.applyTransform([1,0,0,1,x||0,y||0])}}]),Translate}(),Rotate=function(){function Rotate(document,rotate){var transformOrigin=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,Rotate),this.type="rotate",this.angle=null,this.cx=0,this.cy=0;var numbers=toNumbers(rotate);this.angle=new Property(document,"angle",numbers[0]),this.cx=(numbers[1]||0)+(transformOrigin[0]||0),this.cy=(numbers[2]||0)+(transformOrigin[1]||0)}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(Rotate,[{key:"apply",value:function apply(ctx){var cx=this.cx,cy=this.cy,angle=this.angle;ctx.translate(cx,cy),ctx.rotate(angle.getRadians()),ctx.translate(-cx,-cy)}},{key:"unapply",value:function unapply(ctx){var cx=this.cx,cy=this.cy,angle=this.angle;ctx.translate(cx,cy),ctx.rotate(-1*angle.getRadians()),ctx.translate(-cx,-cy)}},{key:"applyToPoint",value:function applyToPoint(point){var cx=this.cx,cy=this.cy,rad=this.angle.getRadians();point.applyTransform([1,0,0,1,cx||0,cy||0]),point.applyTransform([Math.cos(rad),Math.sin(rad),-Math.sin(rad),Math.cos(rad),0,0]),point.applyTransform([1,0,0,1,-cx||0,-cy||0])}}]),Rotate}(),Scale=function(){function Scale(_,scale){_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,Scale),this.type="scale",this.scale=null;var scaleSize=Point.parseScale(scale);0!==scaleSize.x&&0!==scaleSize.y||(scaleSize.x=PSEUDO_ZERO,scaleSize.y=PSEUDO_ZERO),this.scale=scaleSize}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(Scale,[{key:"apply",value:function apply(ctx){var _this$scale=this.scale,x=_this$scale.x,y=_this$scale.y;ctx.scale(x,y||x)}},{key:"unapply",value:function unapply(ctx){var _this$scale2=this.scale,x=_this$scale2.x,y=_this$scale2.y;ctx.scale(1/x,1/y||x)}},{key:"applyToPoint",value:function applyToPoint(point){var _this$scale3=this.scale,x=_this$scale3.x,y=_this$scale3.y;point.applyTransform([x||0,0,0,y||0,0,0])}}]),Scale}(),Matrix=function(){function Matrix(_,matrix){_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,Matrix),this.type="matrix",this.matrix=[],this.matrix=toNumbers(matrix)}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(Matrix,[{key:"apply",value:function apply(ctx){var matrix=this.matrix;ctx.transform(matrix[0],matrix[1],matrix[2],matrix[3],matrix[4],matrix[5])}},{key:"unapply",value:function unapply(ctx){var matrix=this.matrix,a=matrix[0],b=matrix[2],c=matrix[4],d=matrix[1],e=matrix[3],f=matrix[5],det=1/(a*(1*e-0*f)-b*(1*d-0*f)+c*(0*d-0*e));ctx.transform(det*(1*e-0*f),det*(0*f-1*d),det*(0*c-1*b),det*(1*a-0*c),det*(b*f-c*e),det*(c*d-a*f))}},{key:"applyToPoint",value:function applyToPoint(point){point.applyTransform(this.matrix)}}]),Matrix}();function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var Skew=function(_Matrix){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(Skew,_Matrix);var _super=function _createSuper(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(Skew);function Skew(document,skew){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,Skew),(_this=_super.call(this,document,skew)).type="skew",_this.angle=null,_this.angle=new Property(document,"angle",skew),_this}return Skew}(Matrix);function _isNativeReflectConstruct$1(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var SkewX=function(_Skew){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(SkewX,_Skew);var _super=function _createSuper$1(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$1()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(SkewX);function SkewX(document,skew){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,SkewX),(_this=_super.call(this,document,skew)).type="skewX",_this.matrix=[1,0,Math.tan(_this.angle.getRadians()),1,0,0],_this}return SkewX}(Skew);function _isNativeReflectConstruct$2(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var SkewY=function(_Skew){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(SkewY,_Skew);var _super=function _createSuper$2(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$2()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(SkewY);function SkewY(document,skew){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,SkewY),(_this=_super.call(this,document,skew)).type="skewY",_this.matrix=[1,Math.tan(_this.angle.getRadians()),0,1,0,0],_this}return SkewY}(Skew);var Transform=function(){function Transform(document,transform,transformOrigin){var _this=this;_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,Transform),this.document=document,this.transforms=[];var data=function parseTransforms(transform){return compressSpaces(transform).trim().replace(/\)([a-zA-Z])/g,") $1").replace(/\)(\s?,\s?)/g,") ").split(/\s(?=[a-z])/)}(transform),originCoords=transformOrigin?toNumbers(transformOrigin):[];data.forEach((function(transform){if("none"!==transform){var _parseTransform=function parseTransform(transform){var _transform$split=transform.split("("),_transform$split2=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_transform$split,2),type=_transform$split2[0],value=_transform$split2[1];return[type.trim(),value.trim().replace(")","")]}(transform),_parseTransform2=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_parseTransform,2),type=_parseTransform2[0],value=_parseTransform2[1],TransformType=Transform.transformTypes[type];void 0!==TransformType&&_this.transforms.push(new TransformType(_this.document,value,originCoords))}}))}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(Transform,[{key:"apply",value:function apply(ctx){for(var transforms=this.transforms,len=transforms.length,i=0;i<len;i++)transforms[i].apply(ctx)}},{key:"unapply",value:function unapply(ctx){for(var transforms=this.transforms,i=transforms.length-1;i>=0;i--)transforms[i].unapply(ctx)}},{key:"applyToPoint",value:function applyToPoint(point){for(var transforms=this.transforms,len=transforms.length,i=0;i<len;i++)transforms[i].applyToPoint(point)}}],[{key:"fromElement",value:function fromElement(document,element){var transformStyle=element.getStyle("transform",!1,!0),transformOriginStyle=element.getStyle("transform-origin",!1,!0);return transformStyle.hasValue()?new Transform(document,transformStyle.getString(),transformOriginStyle.getString()):null}}]),Transform}();Transform.transformTypes={translate:Translate,rotate:Rotate,scale:Scale,matrix:Matrix,skewX:SkewX,skewY:SkewY};var Element=function(){function Element(document,node){var _this=this,captureTextNodes=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,Element),this.document=document,this.node=node,this.captureTextNodes=captureTextNodes,this.attributes={},this.styles={},this.stylesSpecificity={},this.animationFrozen=!1,this.animationFrozenValue="",this.parent=null,this.children=[],node&&1===node.nodeType){if(Array.from(node.attributes).forEach((function(attribute){var nodeName=normalizeAttributeName(attribute.nodeName);_this.attributes[nodeName]=new Property(document,nodeName,attribute.value)})),this.addStylesFromStyleDefinition(),this.getAttribute("style").hasValue()){var styles=this.getAttribute("style").getString().split(";").map((function(_){return _.trim()}));styles.forEach((function(style){if(style){var _style$split$map=style.split(":").map((function(_){return _.trim()})),_style$split$map2=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_style$split$map,2),name=_style$split$map2[0],value=_style$split$map2[1];_this.styles[name]=new Property(document,name,value)}}))}var definitions=document.definitions,id=this.getAttribute("id");id.hasValue()&&(definitions[id.getValue()]||(definitions[id.getValue()]=this)),Array.from(node.childNodes).forEach((function(childNode){if(1===childNode.nodeType)_this.addChild(childNode);else if(captureTextNodes&&(3===childNode.nodeType||4===childNode.nodeType)){var textNode=document.createTextNode(childNode);textNode.getText().length>0&&_this.addChild(textNode)}}))}}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(Element,[{key:"getAttribute",value:function getAttribute(name){var createIfNotExists=arguments.length>1&&void 0!==arguments[1]&&arguments[1],attr=this.attributes[name];if(!attr&&createIfNotExists){var _attr=new Property(this.document,name,"");return this.attributes[name]=_attr,_attr}return attr||Property.empty(this.document)}},{key:"getHrefAttribute",value:function getHrefAttribute(){for(var key in this.attributes)if("href"===key||/:href$/.test(key))return this.attributes[key];return Property.empty(this.document)}},{key:"getStyle",value:function getStyle(name){var createIfNotExists=arguments.length>1&&void 0!==arguments[1]&&arguments[1],skipAncestors=arguments.length>2&&void 0!==arguments[2]&&arguments[2],style=this.styles[name];if(style)return style;var attr=this.getAttribute(name);if(attr&&attr.hasValue())return this.styles[name]=attr,attr;if(!skipAncestors){var parent=this.parent;if(parent){var parentStyle=parent.getStyle(name);if(parentStyle&&parentStyle.hasValue())return parentStyle}}if(createIfNotExists){var _style=new Property(this.document,name,"");return this.styles[name]=_style,_style}return style||Property.empty(this.document)}},{key:"render",value:function render(ctx){if("none"!==this.getStyle("display").getString()&&"hidden"!==this.getStyle("visibility").getString()){if(ctx.save(),this.getStyle("mask").hasValue()){var mask=this.getStyle("mask").getDefinition();mask&&(this.applyEffects(ctx),mask.apply(ctx,this))}else if("none"!==this.getStyle("filter").getValue("none")){var filter=this.getStyle("filter").getDefinition();filter&&(this.applyEffects(ctx),filter.apply(ctx,this))}else this.setContext(ctx),this.renderChildren(ctx),this.clearContext(ctx);ctx.restore()}}},{key:"setContext",value:function setContext(_){}},{key:"applyEffects",value:function applyEffects(ctx){var transform=Transform.fromElement(this.document,this);transform&&transform.apply(ctx);var clipPathStyleProp=this.getStyle("clip-path",!1,!0);if(clipPathStyleProp.hasValue()){var clip=clipPathStyleProp.getDefinition();clip&&clip.apply(ctx)}}},{key:"clearContext",value:function clearContext(_){}},{key:"renderChildren",value:function renderChildren(ctx){this.children.forEach((function(child){child.render(ctx)}))}},{key:"addChild",value:function addChild(childNode){var child=childNode instanceof Element?childNode:this.document.createElement(childNode);child.parent=this,Element.ignoreChildTypes.includes(child.type)||this.children.push(child)}},{key:"matchesSelector",value:function matchesSelector(selector){var node=this.node;if("function"==typeof node.matches)return node.matches(selector);var styleClasses=node.getAttribute("class");return!(!styleClasses||""===styleClasses)&&styleClasses.split(" ").some((function(styleClass){if(".".concat(styleClass)===selector)return!0}))}},{key:"addStylesFromStyleDefinition",value:function addStylesFromStyleDefinition(){var _this$document=this.document,styles=_this$document.styles,stylesSpecificity=_this$document.stylesSpecificity;for(var selector in styles)if("@"!==selector[0]&&this.matchesSelector(selector)){var style=styles[selector],specificity=stylesSpecificity[selector];if(style)for(var name in style){var existingSpecificity=this.stylesSpecificity[name];void 0===existingSpecificity&&(existingSpecificity="000"),specificity>=existingSpecificity&&(this.styles[name]=style[name],this.stylesSpecificity[name]=specificity)}}}},{key:"removeStyles",value:function removeStyles(element,ignoreStyles){return ignoreStyles.reduce((function(toRestore,name){var styleProp=element.getStyle(name);if(!styleProp.hasValue())return toRestore;var value=styleProp.getString();return styleProp.setValue(""),[].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_39___default()(toRestore),[[name,value]])}),[])}},{key:"restoreStyles",value:function restoreStyles(element,styles){styles.forEach((function(_ref){var _ref2=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_ref,2),name=_ref2[0],value=_ref2[1];element.getStyle(name,!0).setValue(value)}))}}]),Element}();function _isNativeReflectConstruct$3(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}Element.ignoreChildTypes=["title"];var UnknownElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(UnknownElement,_Element);var _super=function _createSuper$3(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$3()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(UnknownElement);function UnknownElement(document,node,captureTextNodes){return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,UnknownElement),_super.call(this,document,node,captureTextNodes)}return UnknownElement}(Element);function wrapFontFamily(fontFamily){var trimmed=fontFamily.trim();return/^('|")/.test(trimmed)?trimmed:'"'.concat(trimmed,'"')}function prepareFontStyle(fontStyle){if(!fontStyle)return"";var targetFontStyle=fontStyle.trim().toLowerCase();switch(targetFontStyle){case"normal":case"italic":case"oblique":case"inherit":case"initial":case"unset":return targetFontStyle;default:return/^oblique\s+(-|)\d+deg$/.test(targetFontStyle)?targetFontStyle:""}}function prepareFontWeight(fontWeight){if(!fontWeight)return"";var targetFontWeight=fontWeight.trim().toLowerCase();switch(targetFontWeight){case"normal":case"bold":case"lighter":case"bolder":case"inherit":case"initial":case"unset":return targetFontWeight;default:return/^[\d.]+$/.test(targetFontWeight)?targetFontWeight:""}}var Font=function(){function Font(fontStyle,fontVariant,fontWeight,fontSize,fontFamily,inherit){_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,Font);var inheritFont=inherit?"string"==typeof inherit?Font.parse(inherit):inherit:{};this.fontFamily=fontFamily||inheritFont.fontFamily,this.fontSize=fontSize||inheritFont.fontSize,this.fontStyle=fontStyle||inheritFont.fontStyle,this.fontWeight=fontWeight||inheritFont.fontWeight,this.fontVariant=fontVariant||inheritFont.fontVariant}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(Font,[{key:"toString",value:function toString(){return[prepareFontStyle(this.fontStyle),this.fontVariant,prepareFontWeight(this.fontWeight),this.fontSize,(fontFamily=this.fontFamily,void 0===process?fontFamily:fontFamily.trim().split(",").map(wrapFontFamily).join(","))].join(" ").trim();var fontFamily}}],[{key:"parse",value:function parse(){var font=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",inherit=arguments.length>1?arguments[1]:void 0,fontStyle="",fontVariant="",fontWeight="",fontSize="",fontFamily="",parts=compressSpaces(font).trim().split(" "),set={fontSize:!1,fontStyle:!1,fontWeight:!1,fontVariant:!1};return parts.forEach((function(part){switch(!0){case!set.fontStyle&&Font.styles.includes(part):"inherit"!==part&&(fontStyle=part),set.fontStyle=!0;break;case!set.fontVariant&&Font.variants.includes(part):"inherit"!==part&&(fontVariant=part),set.fontStyle=!0,set.fontVariant=!0;break;case!set.fontWeight&&Font.weights.includes(part):"inherit"!==part&&(fontWeight=part),set.fontStyle=!0,set.fontVariant=!0,set.fontWeight=!0;break;case!set.fontSize:if("inherit"!==part){var _part$split=part.split("/"),_part$split2=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_part$split,1);fontSize=_part$split2[0]}set.fontStyle=!0,set.fontVariant=!0,set.fontWeight=!0,set.fontSize=!0;break;default:"inherit"!==part&&(fontFamily+=part)}})),new Font(fontStyle,fontVariant,fontWeight,fontSize,fontFamily,inherit)}}]),Font}();Font.styles="normal|italic|oblique|inherit",Font.variants="normal|small-caps|inherit",Font.weights="normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit";var BoundingBox=function(){function BoundingBox(){var x1=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Number.NaN,y1=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.NaN,x2=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Number.NaN,y2=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Number.NaN;_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,BoundingBox),this.x1=x1,this.y1=y1,this.x2=x2,this.y2=y2,this.addPoint(x1,y1),this.addPoint(x2,y2)}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(BoundingBox,[{key:"addPoint",value:function addPoint(x,y){void 0!==x&&((isNaN(this.x1)||isNaN(this.x2))&&(this.x1=x,this.x2=x),x<this.x1&&(this.x1=x),x>this.x2&&(this.x2=x)),void 0!==y&&((isNaN(this.y1)||isNaN(this.y2))&&(this.y1=y,this.y2=y),y<this.y1&&(this.y1=y),y>this.y2&&(this.y2=y))}},{key:"addX",value:function addX(x){this.addPoint(x,null)}},{key:"addY",value:function addY(y){this.addPoint(null,y)}},{key:"addBoundingBox",value:function addBoundingBox(boundingBox){if(boundingBox){var x1=boundingBox.x1,y1=boundingBox.y1,x2=boundingBox.x2,y2=boundingBox.y2;this.addPoint(x1,y1),this.addPoint(x2,y2)}}},{key:"sumCubic",value:function sumCubic(t,p0,p1,p2,p3){return Math.pow(1-t,3)*p0+3*Math.pow(1-t,2)*t*p1+3*(1-t)*Math.pow(t,2)*p2+Math.pow(t,3)*p3}},{key:"bezierCurveAdd",value:function bezierCurveAdd(forX,p0,p1,p2,p3){var b=6*p0-12*p1+6*p2,a=-3*p0+9*p1-9*p2+3*p3,c=3*p1-3*p0;if(0!==a){var b2ac=Math.pow(b,2)-4*c*a;if(!(b2ac<0)){var t1=(-b+Math.sqrt(b2ac))/(2*a);0<t1&&t1<1&&(forX?this.addX(this.sumCubic(t1,p0,p1,p2,p3)):this.addY(this.sumCubic(t1,p0,p1,p2,p3)));var t2=(-b-Math.sqrt(b2ac))/(2*a);0<t2&&t2<1&&(forX?this.addX(this.sumCubic(t2,p0,p1,p2,p3)):this.addY(this.sumCubic(t2,p0,p1,p2,p3)))}}else{if(0===b)return;var t=-c/b;0<t&&t<1&&(forX?this.addX(this.sumCubic(t,p0,p1,p2,p3)):this.addY(this.sumCubic(t,p0,p1,p2,p3)))}}},{key:"addBezierCurve",value:function addBezierCurve(p0x,p0y,p1x,p1y,p2x,p2y,p3x,p3y){this.addPoint(p0x,p0y),this.addPoint(p3x,p3y),this.bezierCurveAdd(!0,p0x,p1x,p2x,p3x),this.bezierCurveAdd(!1,p0y,p1y,p2y,p3y)}},{key:"addQuadraticCurve",value:function addQuadraticCurve(p0x,p0y,p1x,p1y,p2x,p2y){var cp1x=p0x+2/3*(p1x-p0x),cp1y=p0y+2/3*(p1y-p0y),cp2x=cp1x+1/3*(p2x-p0x),cp2y=cp1y+1/3*(p2y-p0y);this.addBezierCurve(p0x,p0y,cp1x,cp2x,cp1y,cp2y,p2x,p2y)}},{key:"isPointInBox",value:function isPointInBox(x,y){var x1=this.x1,y1=this.y1,x2=this.x2,y2=this.y2;return x1<=x&&x<=x2&&y1<=y&&y<=y2}},{key:"x",get:function get(){return this.x1}},{key:"y",get:function get(){return this.y1}},{key:"width",get:function get(){return this.x2-this.x1}},{key:"height",get:function get(){return this.y2-this.y1}}]),BoundingBox}();function _isNativeReflectConstruct$4(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var RenderedElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(RenderedElement,_Element);var _super=function _createSuper$4(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$4()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(RenderedElement);function RenderedElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,RenderedElement),(_this=_super.apply(this,arguments)).modifiedEmSizeStack=!1,_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(RenderedElement,[{key:"calculateOpacity",value:function calculateOpacity(){for(var opacity=1,element=this;element;){var opacityStyle=element.getStyle("opacity",!1,!0);opacityStyle.hasValue()&&(opacity*=opacityStyle.getNumber()),element=element.parent}return opacity}},{key:"setContext",value:function setContext(ctx){var fromMeasure=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!fromMeasure){var fillStyleProp=this.getStyle("fill"),fillOpacityStyleProp=this.getStyle("fill-opacity"),strokeStyleProp=this.getStyle("stroke"),strokeOpacityProp=this.getStyle("stroke-opacity");if(fillStyleProp.isUrlDefinition()){var fillStyle=fillStyleProp.getFillStyleDefinition(this,fillOpacityStyleProp);fillStyle&&(ctx.fillStyle=fillStyle)}else if(fillStyleProp.hasValue()){"currentColor"===fillStyleProp.getString()&&fillStyleProp.setValue(this.getStyle("color").getColor());var _fillStyle=fillStyleProp.getColor();"inherit"!==_fillStyle&&(ctx.fillStyle="none"===_fillStyle?"rgba(0,0,0,0)":_fillStyle)}if(fillOpacityStyleProp.hasValue()){var _fillStyle2=new Property(this.document,"fill",ctx.fillStyle).addOpacity(fillOpacityStyleProp).getColor();ctx.fillStyle=_fillStyle2}if(strokeStyleProp.isUrlDefinition()){var strokeStyle=strokeStyleProp.getFillStyleDefinition(this,strokeOpacityProp);strokeStyle&&(ctx.strokeStyle=strokeStyle)}else if(strokeStyleProp.hasValue()){"currentColor"===strokeStyleProp.getString()&&strokeStyleProp.setValue(this.getStyle("color").getColor());var _strokeStyle=strokeStyleProp.getString();"inherit"!==_strokeStyle&&(ctx.strokeStyle="none"===_strokeStyle?"rgba(0,0,0,0)":_strokeStyle)}if(strokeOpacityProp.hasValue()){var _strokeStyle2=new Property(this.document,"stroke",ctx.strokeStyle).addOpacity(strokeOpacityProp).getString();ctx.strokeStyle=_strokeStyle2}var strokeWidthStyleProp=this.getStyle("stroke-width");if(strokeWidthStyleProp.hasValue()){var newLineWidth=strokeWidthStyleProp.getPixels();ctx.lineWidth=newLineWidth||PSEUDO_ZERO}var strokeLinecapStyleProp=this.getStyle("stroke-linecap"),strokeLinejoinStyleProp=this.getStyle("stroke-linejoin"),strokeMiterlimitProp=this.getStyle("stroke-miterlimit"),pointOrderStyleProp=this.getStyle("paint-order"),strokeDasharrayStyleProp=this.getStyle("stroke-dasharray"),strokeDashoffsetProp=this.getStyle("stroke-dashoffset");if(strokeLinecapStyleProp.hasValue()&&(ctx.lineCap=strokeLinecapStyleProp.getString()),strokeLinejoinStyleProp.hasValue()&&(ctx.lineJoin=strokeLinejoinStyleProp.getString()),strokeMiterlimitProp.hasValue()&&(ctx.miterLimit=strokeMiterlimitProp.getNumber()),pointOrderStyleProp.hasValue()&&(ctx.paintOrder=pointOrderStyleProp.getValue()),strokeDasharrayStyleProp.hasValue()&&"none"!==strokeDasharrayStyleProp.getString()){var gaps=toNumbers(strokeDasharrayStyleProp.getString());void 0!==ctx.setLineDash?ctx.setLineDash(gaps):void 0!==ctx.webkitLineDash?ctx.webkitLineDash=gaps:void 0===ctx.mozDash||1===gaps.length&&0===gaps[0]||(ctx.mozDash=gaps);var offset=strokeDashoffsetProp.getPixels();void 0!==ctx.lineDashOffset?ctx.lineDashOffset=offset:void 0!==ctx.webkitLineDashOffset?ctx.webkitLineDashOffset=offset:void 0!==ctx.mozDashOffset&&(ctx.mozDashOffset=offset)}}if(this.modifiedEmSizeStack=!1,void 0!==ctx.font){var fontStyleProp=this.getStyle("font"),fontStyleStyleProp=this.getStyle("font-style"),fontVariantStyleProp=this.getStyle("font-variant"),fontWeightStyleProp=this.getStyle("font-weight"),fontSizeStyleProp=this.getStyle("font-size"),fontFamilyStyleProp=this.getStyle("font-family"),font=new Font(fontStyleStyleProp.getString(),fontVariantStyleProp.getString(),fontWeightStyleProp.getString(),fontSizeStyleProp.hasValue()?"".concat(fontSizeStyleProp.getPixels(!0),"px"):"",fontFamilyStyleProp.getString(),Font.parse(fontStyleProp.getString(),ctx.font));fontStyleStyleProp.setValue(font.fontStyle),fontVariantStyleProp.setValue(font.fontVariant),fontWeightStyleProp.setValue(font.fontWeight),fontSizeStyleProp.setValue(font.fontSize),fontFamilyStyleProp.setValue(font.fontFamily),ctx.font=font.toString(),fontSizeStyleProp.isPixels()&&(this.document.emSize=fontSizeStyleProp.getPixels(),this.modifiedEmSizeStack=!0)}fromMeasure||(this.applyEffects(ctx),ctx.globalAlpha=this.calculateOpacity())}},{key:"clearContext",value:function clearContext(ctx){_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_42___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(RenderedElement.prototype),"clearContext",this).call(this,ctx),this.modifiedEmSizeStack&&this.document.popEmSize()}}]),RenderedElement}(Element);function _isNativeReflectConstruct$5(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var TextElement=function(_RenderedElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(TextElement,_RenderedElement);var _super=function _createSuper$5(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$5()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(TextElement);function TextElement(document,node,captureTextNodes){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,TextElement),(_this=_super.call(this,document,node,(this instanceof TextElement?this.constructor:void 0)===TextElement||captureTextNodes)).type="text",_this.x=0,_this.y=0,_this.measureCache=-1,_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(TextElement,[{key:"setContext",value:function setContext(ctx){var fromMeasure=arguments.length>1&&void 0!==arguments[1]&&arguments[1];_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_42___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(TextElement.prototype),"setContext",this).call(this,ctx,fromMeasure);var textBaseline=this.getStyle("dominant-baseline").getTextBaseline()||this.getStyle("alignment-baseline").getTextBaseline();textBaseline&&(ctx.textBaseline=textBaseline)}},{key:"initializeCoordinates",value:function initializeCoordinates(ctx){this.x=this.getAttribute("x").getPixels("x"),this.y=this.getAttribute("y").getPixels("y");var dxAttr=this.getAttribute("dx"),dyAttr=this.getAttribute("dy");dxAttr.hasValue()&&(this.x+=dxAttr.getPixels("x")),dyAttr.hasValue()&&(this.y+=dyAttr.getPixels("y")),this.x+=this.getAnchorDelta(ctx,this,0)}},{key:"getBoundingBox",value:function getBoundingBox(ctx){var _this2=this;if("text"!==this.type)return this.getTElementBoundingBox(ctx);this.initializeCoordinates(ctx);var boundingBox=null;return this.children.forEach((function(_,i){var childBoundingBox=_this2.getChildBoundingBox(ctx,_this2,_this2,i);boundingBox?boundingBox.addBoundingBox(childBoundingBox):boundingBox=childBoundingBox})),boundingBox}},{key:"getFontSize",value:function getFontSize(){var document=this.document,parent=this.parent,inheritFontSize=Font.parse(document.ctx.font).fontSize;return parent.getStyle("font-size").getNumber(inheritFontSize)}},{key:"getTElementBoundingBox",value:function getTElementBoundingBox(ctx){var fontSize=this.getFontSize();return new BoundingBox(this.x,this.y-fontSize,this.x+this.measureText(ctx),this.y)}},{key:"getGlyph",value:function getGlyph(font,text,i){var char=text[i],glyph=null;if(font.isArabic){var len=text.length,prevChar=text[i-1],nextChar=text[i+1],arabicForm="isolated";(0===i||" "===prevChar)&&i<len-2&&" "!==nextChar&&(arabicForm="terminal"),i>0&&" "!==prevChar&&i<len-2&&" "!==nextChar&&(arabicForm="medial"),i>0&&" "!==prevChar&&(i===len-1||" "===nextChar)&&(arabicForm="initial"),void 0!==font.glyphs[char]&&((glyph=font.glyphs[char][arabicForm])||"glyph"!==font.glyphs[char].type||(glyph=font.glyphs[char]))}else glyph=font.glyphs[char];return glyph||(glyph=font.missingGlyph),glyph}},{key:"getText",value:function getText(){return""}},{key:"getTextFromNode",value:function getTextFromNode(node){var textNode=node||this.node,childNodes=Array.from(textNode.parentNode.childNodes),index=childNodes.indexOf(textNode),lastIndex=childNodes.length-1,text=compressSpaces(textNode.value||textNode.text||textNode.textContent||"");return 0===index&&(text=trimLeft(text)),index===lastIndex&&(text=trimRight(text)),text}},{key:"renderChildren",value:function renderChildren(ctx){var _this3=this;if("text"===this.type){this.initializeCoordinates(ctx),this.children.forEach((function(_,i){_this3.renderChild(ctx,_this3,_this3,i)}));var mouse=this.document.screen.mouse;mouse.isWorking()&&mouse.checkBoundingBox(this,this.getBoundingBox(ctx))}else this.renderTElementChildren(ctx)}},{key:"renderTElementChildren",value:function renderTElementChildren(ctx){var document=this.document,parent=this.parent,renderText=this.getText(),customFont=parent.getStyle("font-family").getDefinition();if(customFont)for(var unitsPerEm=customFont.fontFace.unitsPerEm,ctxFont=Font.parse(document.ctx.font),fontSize=parent.getStyle("font-size").getNumber(ctxFont.fontSize),fontStyle=parent.getStyle("font-style").getString(ctxFont.fontStyle),scale=fontSize/unitsPerEm,text=customFont.isRTL?renderText.split("").reverse().join(""):renderText,dx=toNumbers(parent.getAttribute("dx").getString()),len=text.length,i=0;i<len;i++){var glyph=this.getGlyph(customFont,text,i);ctx.translate(this.x,this.y),ctx.scale(scale,-scale);var lw=ctx.lineWidth;ctx.lineWidth=ctx.lineWidth*unitsPerEm/fontSize,"italic"===fontStyle&&ctx.transform(1,0,.4,1,0,0),glyph.render(ctx),"italic"===fontStyle&&ctx.transform(1,0,-.4,1,0,0),ctx.lineWidth=lw,ctx.scale(1/scale,-1/scale),ctx.translate(-this.x,-this.y),this.x+=fontSize*(glyph.horizAdvX||customFont.horizAdvX)/unitsPerEm,void 0===dx[i]||isNaN(dx[i])||(this.x+=dx[i])}else{var x=this.x,y=this.y;"stroke"===ctx.paintOrder?(ctx.strokeStyle&&ctx.strokeText(renderText,x,y),ctx.fillStyle&&ctx.fillText(renderText,x,y)):(ctx.fillStyle&&ctx.fillText(renderText,x,y),ctx.strokeStyle&&ctx.strokeText(renderText,x,y))}}},{key:"getAnchorDelta",value:function getAnchorDelta(ctx,parent,startI){var textAnchor=this.getStyle("text-anchor").getString("start");if("start"!==textAnchor){for(var children=parent.children,len=children.length,child=null,width=0,i=startI;i<len&&(child=children[i],!(i>startI&&child.getAttribute("x").hasValue()||child.getAttribute("text-anchor").hasValue()));i++)width+=child.measureTextRecursive(ctx);return-1*("end"===textAnchor?width:width/2)}return 0}},{key:"adjustChildCoordinates",value:function adjustChildCoordinates(ctx,textParent,parent,i){var child=parent.children[i];if("function"!=typeof child.measureText)return child;ctx.save(),child.setContext(ctx,!0);var xAttr=child.getAttribute("x"),yAttr=child.getAttribute("y"),dxAttr=child.getAttribute("dx"),dyAttr=child.getAttribute("dy"),textAnchor=child.getAttribute("text-anchor").getString("start");if(0===i&&"textNode"!==child.type&&(xAttr.hasValue()||xAttr.setValue(textParent.getAttribute("x").getValue("0")),yAttr.hasValue()||yAttr.setValue(textParent.getAttribute("y").getValue("0")),dxAttr.hasValue()||dxAttr.setValue(textParent.getAttribute("dx").getValue("0")),dyAttr.hasValue()||dyAttr.setValue(textParent.getAttribute("dy").getValue("0"))),xAttr.hasValue()){if(child.x=xAttr.getPixels("x")+textParent.getAnchorDelta(ctx,parent,i),"start"!==textAnchor){var width=child.measureTextRecursive(ctx);child.x+=-1*("end"===textAnchor?width:width/2)}dxAttr.hasValue()&&(child.x+=dxAttr.getPixels("x"))}else{if("start"!==textAnchor){var _width=child.measureTextRecursive(ctx);textParent.x+=-1*("end"===textAnchor?_width:_width/2)}dxAttr.hasValue()&&(textParent.x+=dxAttr.getPixels("x")),child.x=textParent.x}return textParent.x=child.x+child.measureText(ctx),yAttr.hasValue()?(child.y=yAttr.getPixels("y"),dyAttr.hasValue()&&(child.y+=dyAttr.getPixels("y"))):(dyAttr.hasValue()&&(textParent.y+=dyAttr.getPixels("y")),child.y=textParent.y),textParent.y=child.y,child.clearContext(ctx),ctx.restore(),child}},{key:"getChildBoundingBox",value:function getChildBoundingBox(ctx,textParent,parent,i){var child=this.adjustChildCoordinates(ctx,textParent,parent,i),boundingBox=child.getBoundingBox(ctx);return boundingBox?(child.children.forEach((function(_,i){var childBoundingBox=textParent.getChildBoundingBox(ctx,textParent,child,i);boundingBox.addBoundingBox(childBoundingBox)})),boundingBox):null}},{key:"renderChild",value:function renderChild(ctx,textParent,parent,i){var child=this.adjustChildCoordinates(ctx,textParent,parent,i);child.render(ctx),child.children.forEach((function(_,i){textParent.renderChild(ctx,textParent,child,i)}))}},{key:"measureTextRecursive",value:function measureTextRecursive(ctx){return this.children.reduce((function(width,child){return width+child.measureTextRecursive(ctx)}),this.measureText(ctx))}},{key:"measureText",value:function measureText(ctx){var measureCache=this.measureCache;if(~measureCache)return measureCache;var renderText=this.getText(),measure=this.measureTargetText(ctx,renderText);return this.measureCache=measure,measure}},{key:"measureTargetText",value:function measureTargetText(ctx,targetText){if(!targetText.length)return 0;var parent=this.parent,customFont=parent.getStyle("font-family").getDefinition();if(customFont){for(var fontSize=this.getFontSize(),text=customFont.isRTL?targetText.split("").reverse().join(""):targetText,dx=toNumbers(parent.getAttribute("dx").getString()),len=text.length,_measure=0,i=0;i<len;i++){_measure+=(this.getGlyph(customFont,text,i).horizAdvX||customFont.horizAdvX)*fontSize/customFont.fontFace.unitsPerEm,void 0===dx[i]||isNaN(dx[i])||(_measure+=dx[i])}return _measure}if(!ctx.measureText)return 10*targetText.length;ctx.save(),this.setContext(ctx,!0);var measure=ctx.measureText(targetText).width;return this.clearContext(ctx),ctx.restore(),measure}}]),TextElement}(RenderedElement);function _isNativeReflectConstruct$6(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var TSpanElement=function(_TextElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(TSpanElement,_TextElement);var _super=function _createSuper$6(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$6()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(TSpanElement);function TSpanElement(document,node,captureTextNodes){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,TSpanElement),(_this=_super.call(this,document,node,(this instanceof TSpanElement?this.constructor:void 0)===TSpanElement||captureTextNodes)).type="tspan",_this.text=_this.children.length>0?"":_this.getTextFromNode(),_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(TSpanElement,[{key:"getText",value:function getText(){return this.text}}]),TSpanElement}(TextElement);function _isNativeReflectConstruct$7(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var TextNode=function(_TSpanElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(TextNode,_TSpanElement);var _super=function _createSuper$7(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$7()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(TextNode);function TextNode(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,TextNode),(_this=_super.apply(this,arguments)).type="textNode",_this}return TextNode}(TSpanElement);var PathParser=function(){function PathParser(path){_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,PathParser),this.control=null,this.start=null,this.current=null,this.command="",this.tokens=[],this.i=-1,this.previousCommand="",this.points=[],this.angles=[],this.tokens=function preparePath(path){return compressSpaces(path.replace(/,/gm," ").replace(/([MmZzLlHhVvCcSsQqTtAa])([^\s])/gm,"$1 $2").replace(/([MmZzLlHhVvCcSsQqTtAa])([^\s])/gm,"$1 $2").replace(/([^\s])([MmZzLlHhVvCcSsQqTtAa])/gm,"$1 $2").replace(/([0-9])([+\-])/gm,"$1 $2").replace(/(\.[0-9]*)(\.)/gm,"$1 $2").replace(/(\.[0-9]*)(\.)/gm,"$1 $2").replace(/([Aa](?:\s+(?:[0-9]*\.)?[0-9]+){3})\s+([01])\s*([01])/gm,"$1 $2 $3 ")).trim()}(path).split(" ")}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(PathParser,[{key:"reset",value:function reset(){this.i=-1,this.command="",this.previousCommand="",this.start=new Point(0,0),this.control=new Point(0,0),this.current=new Point(0,0),this.points=[],this.angles=[]}},{key:"isEnd",value:function isEnd(){return this.i>=this.tokens.length-1}},{key:"isCommandOrEnd",value:function isCommandOrEnd(){if(this.isEnd())return!0;var i=this.i,tokens=this.tokens;return/^[A-Za-z]$/.test(tokens[i+1])}},{key:"isRelativeCommand",value:function isRelativeCommand(){switch(this.command){case"m":case"l":case"h":case"v":case"c":case"s":case"q":case"t":case"a":case"z":return!0;default:return!1}}},{key:"getToken",value:function getToken(){return this.i++,this.tokens[this.i]}},{key:"getScalar",value:function getScalar(){return parseFloat(this.getToken())}},{key:"nextCommand",value:function nextCommand(){this.previousCommand=this.command,this.command=this.getToken()}},{key:"getPoint",value:function getPoint(){var point=new Point(this.getScalar(),this.getScalar());return this.makeAbsolute(point)}},{key:"getAsControlPoint",value:function getAsControlPoint(){var point=this.getPoint();return this.control=point,point}},{key:"getAsCurrentPoint",value:function getAsCurrentPoint(){var point=this.getPoint();return this.current=point,point}},{key:"getReflectedControlPoint",value:function getReflectedControlPoint(){var previousCommand=this.previousCommand.toLowerCase();if("c"!==previousCommand&&"s"!==previousCommand&&"q"!==previousCommand&&"t"!==previousCommand)return this.current;var _this$current=this.current,cx=_this$current.x,cy=_this$current.y,_this$control=this.control,ox=_this$control.x,oy=_this$control.y;return new Point(2*cx-ox,2*cy-oy)}},{key:"makeAbsolute",value:function makeAbsolute(point){if(this.isRelativeCommand()){var _this$current2=this.current,x=_this$current2.x,y=_this$current2.y;point.x+=x,point.y+=y}return point}},{key:"addMarker",value:function addMarker(point,from,priorTo){var points=this.points,angles=this.angles;priorTo&&angles.length>0&&!angles[angles.length-1]&&(angles[angles.length-1]=points[points.length-1].angleTo(priorTo)),this.addMarkerAngle(point,from?from.angleTo(point):null)}},{key:"addMarkerAngle",value:function addMarkerAngle(point,angle){this.points.push(point),this.angles.push(angle)}},{key:"getMarkerPoints",value:function getMarkerPoints(){return this.points}},{key:"getMarkerAngles",value:function getMarkerAngles(){for(var angles=this.angles,len=angles.length,i=0;i<len;i++)if(!angles[i])for(var j=i+1;j<len;j++)if(angles[j]){angles[i]=angles[j];break}return angles}}]),PathParser}();function _isNativeReflectConstruct$8(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var PathElement=function(_RenderedElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(PathElement,_RenderedElement);var _super=function _createSuper$8(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$8()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(PathElement);function PathElement(document,node,captureTextNodes){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,PathElement),(_this=_super.call(this,document,node,captureTextNodes)).type="path",_this.pathParser=null,_this.pathParser=new PathParser(_this.getAttribute("d").getString()),_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(PathElement,[{key:"path",value:function path(ctx){var pathParser=this.pathParser,boundingBox=new BoundingBox;for(pathParser.reset(),ctx&&ctx.beginPath();!pathParser.isEnd();)switch(pathParser.nextCommand(),pathParser.command){case"M":case"m":this.pathM(ctx,boundingBox);break;case"L":case"l":this.pathL(ctx,boundingBox);break;case"H":case"h":this.pathH(ctx,boundingBox);break;case"V":case"v":this.pathV(ctx,boundingBox);break;case"C":case"c":this.pathC(ctx,boundingBox);break;case"S":case"s":this.pathS(ctx,boundingBox);break;case"Q":case"q":this.pathQ(ctx,boundingBox);break;case"T":case"t":this.pathT(ctx,boundingBox);break;case"A":case"a":this.pathA(ctx,boundingBox);break;case"Z":case"z":this.pathZ(ctx,boundingBox)}return boundingBox}},{key:"getBoundingBox",value:function getBoundingBox(_){return this.path()}},{key:"getMarkers",value:function getMarkers(){var pathParser=this.pathParser,points=pathParser.getMarkerPoints(),angles=pathParser.getMarkerAngles();return points.map((function(point,i){return[point,angles[i]]}))}},{key:"renderChildren",value:function renderChildren(ctx){this.path(ctx),this.document.screen.mouse.checkPath(this,ctx);var fillRuleStyleProp=this.getStyle("fill-rule");""!==ctx.fillStyle&&("inherit"!==fillRuleStyleProp.getString("inherit")?ctx.fill(fillRuleStyleProp.getString()):ctx.fill()),""!==ctx.strokeStyle&&ctx.stroke();var markers=this.getMarkers();if(markers){var markersLastIndex=markers.length-1,markerStartStyleProp=this.getStyle("marker-start"),markerMidStyleProp=this.getStyle("marker-mid"),markerEndStyleProp=this.getStyle("marker-end");if(markerStartStyleProp.isUrlDefinition()){var marker=markerStartStyleProp.getDefinition(),_markers$=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(markers[0],2),point=_markers$[0],angle=_markers$[1];marker.render(ctx,point,angle)}if(markerMidStyleProp.isUrlDefinition())for(var _marker=markerMidStyleProp.getDefinition(),i=1;i<markersLastIndex;i++){var _markers$i=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(markers[i],2),_point=_markers$i[0],_angle=_markers$i[1];_marker.render(ctx,_point,_angle)}if(markerEndStyleProp.isUrlDefinition()){var _marker2=markerEndStyleProp.getDefinition(),_markers$markersLastI=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(markers[markersLastIndex],2),_point2=_markers$markersLastI[0],_angle2=_markers$markersLastI[1];_marker2.render(ctx,_point2,_angle2)}}}},{key:"pathM",value:function pathM(ctx,boundingBox){var pathParser=this.pathParser,point=pathParser.getAsCurrentPoint(),x=point.x,y=point.y;for(pathParser.addMarker(point),boundingBox.addPoint(x,y),ctx&&ctx.moveTo(x,y),pathParser.start=pathParser.current;!pathParser.isCommandOrEnd();){var _point3=pathParser.getAsCurrentPoint(),_x=_point3.x,_y=_point3.y;pathParser.addMarker(_point3,pathParser.start),boundingBox.addPoint(_x,_y),ctx&&ctx.lineTo(_x,_y)}}},{key:"pathL",value:function pathL(ctx,boundingBox){for(var pathParser=this.pathParser;!pathParser.isCommandOrEnd();){var current=pathParser.current,point=pathParser.getAsCurrentPoint(),x=point.x,y=point.y;pathParser.addMarker(point,current),boundingBox.addPoint(x,y),ctx&&ctx.lineTo(x,y)}}},{key:"pathH",value:function pathH(ctx,boundingBox){for(var pathParser=this.pathParser;!pathParser.isCommandOrEnd();){var current=pathParser.current,point=new Point((pathParser.isRelativeCommand()?current.x:0)+pathParser.getScalar(),current.y);pathParser.addMarker(point,current),pathParser.current=point,boundingBox.addPoint(point.x,point.y),ctx&&ctx.lineTo(point.x,point.y)}}},{key:"pathV",value:function pathV(ctx,boundingBox){for(var pathParser=this.pathParser;!pathParser.isCommandOrEnd();){var current=pathParser.current,point=new Point(current.x,(pathParser.isRelativeCommand()?current.y:0)+pathParser.getScalar());pathParser.addMarker(point,current),pathParser.current=point,boundingBox.addPoint(point.x,point.y),ctx&&ctx.lineTo(point.x,point.y)}}},{key:"pathC",value:function pathC(ctx,boundingBox){for(var pathParser=this.pathParser;!pathParser.isCommandOrEnd();){var current=pathParser.current,point=pathParser.getPoint(),controlPoint=pathParser.getAsControlPoint(),currentPoint=pathParser.getAsCurrentPoint();pathParser.addMarker(currentPoint,controlPoint,point),boundingBox.addBezierCurve(current.x,current.y,point.x,point.y,controlPoint.x,controlPoint.y,currentPoint.x,currentPoint.y),ctx&&ctx.bezierCurveTo(point.x,point.y,controlPoint.x,controlPoint.y,currentPoint.x,currentPoint.y)}}},{key:"pathS",value:function pathS(ctx,boundingBox){for(var pathParser=this.pathParser;!pathParser.isCommandOrEnd();){var current=pathParser.current,point=pathParser.getReflectedControlPoint(),controlPoint=pathParser.getAsControlPoint(),currentPoint=pathParser.getAsCurrentPoint();pathParser.addMarker(currentPoint,controlPoint,point),boundingBox.addBezierCurve(current.x,current.y,point.x,point.y,controlPoint.x,controlPoint.y,currentPoint.x,currentPoint.y),ctx&&ctx.bezierCurveTo(point.x,point.y,controlPoint.x,controlPoint.y,currentPoint.x,currentPoint.y)}}},{key:"pathQ",value:function pathQ(ctx,boundingBox){for(var pathParser=this.pathParser;!pathParser.isCommandOrEnd();){var current=pathParser.current,controlPoint=pathParser.getAsControlPoint(),currentPoint=pathParser.getAsCurrentPoint();pathParser.addMarker(currentPoint,controlPoint,controlPoint),boundingBox.addQuadraticCurve(current.x,current.y,controlPoint.x,controlPoint.y,currentPoint.x,currentPoint.y),ctx&&ctx.quadraticCurveTo(controlPoint.x,controlPoint.y,currentPoint.x,currentPoint.y)}}},{key:"pathT",value:function pathT(ctx,boundingBox){for(var pathParser=this.pathParser;!pathParser.isCommandOrEnd();){var current=pathParser.current,controlPoint=pathParser.getReflectedControlPoint();pathParser.control=controlPoint;var currentPoint=pathParser.getAsCurrentPoint();pathParser.addMarker(currentPoint,controlPoint,controlPoint),boundingBox.addQuadraticCurve(current.x,current.y,controlPoint.x,controlPoint.y,currentPoint.x,currentPoint.y),ctx&&ctx.quadraticCurveTo(controlPoint.x,controlPoint.y,currentPoint.x,currentPoint.y)}}},{key:"pathA",value:function pathA(ctx,boundingBox){for(var pathParser=this.pathParser;!pathParser.isCommandOrEnd();){var current=pathParser.current,rx=pathParser.getScalar(),ry=pathParser.getScalar(),xAxisRotation=pathParser.getScalar()*(Math.PI/180),largeArcFlag=pathParser.getScalar(),sweepFlag=pathParser.getScalar(),currentPoint=pathParser.getAsCurrentPoint(),currp=new Point(Math.cos(xAxisRotation)*(current.x-currentPoint.x)/2+Math.sin(xAxisRotation)*(current.y-currentPoint.y)/2,-Math.sin(xAxisRotation)*(current.x-currentPoint.x)/2+Math.cos(xAxisRotation)*(current.y-currentPoint.y)/2),l=Math.pow(currp.x,2)/Math.pow(rx,2)+Math.pow(currp.y,2)/Math.pow(ry,2);l>1&&(rx*=Math.sqrt(l),ry*=Math.sqrt(l));var s=(largeArcFlag===sweepFlag?-1:1)*Math.sqrt((Math.pow(rx,2)*Math.pow(ry,2)-Math.pow(rx,2)*Math.pow(currp.y,2)-Math.pow(ry,2)*Math.pow(currp.x,2))/(Math.pow(rx,2)*Math.pow(currp.y,2)+Math.pow(ry,2)*Math.pow(currp.x,2)));isNaN(s)&&(s=0);var cpp=new Point(s*rx*currp.y/ry,s*-ry*currp.x/rx),centp=new Point((current.x+currentPoint.x)/2+Math.cos(xAxisRotation)*cpp.x-Math.sin(xAxisRotation)*cpp.y,(current.y+currentPoint.y)/2+Math.sin(xAxisRotation)*cpp.x+Math.cos(xAxisRotation)*cpp.y),a1=vectorsAngle([1,0],[(currp.x-cpp.x)/rx,(currp.y-cpp.y)/ry]),u=[(currp.x-cpp.x)/rx,(currp.y-cpp.y)/ry],v=[(-currp.x-cpp.x)/rx,(-currp.y-cpp.y)/ry],ad=vectorsAngle(u,v);vectorsRatio(u,v)<=-1&&(ad=Math.PI),vectorsRatio(u,v)>=1&&(ad=0);var dir=1-sweepFlag?1:-1,ah=a1+dir*(ad/2),halfWay=new Point(centp.x+rx*Math.cos(ah),centp.y+ry*Math.sin(ah));if(pathParser.addMarkerAngle(halfWay,ah-dir*Math.PI/2),pathParser.addMarkerAngle(currentPoint,ah-dir*Math.PI),boundingBox.addPoint(currentPoint.x,currentPoint.y),ctx&&!isNaN(a1)&&!isNaN(ad)){var r=rx>ry?rx:ry,sx=rx>ry?1:rx/ry,sy=rx>ry?ry/rx:1;ctx.translate(centp.x,centp.y),ctx.rotate(xAxisRotation),ctx.scale(sx,sy),ctx.arc(0,0,r,a1,a1+ad,Boolean(1-sweepFlag)),ctx.scale(1/sx,1/sy),ctx.rotate(-xAxisRotation),ctx.translate(-centp.x,-centp.y)}}}},{key:"pathZ",value:function pathZ(ctx,boundingBox){var pathParser=this.pathParser;ctx&&boundingBox.x1!==boundingBox.x2&&boundingBox.y1!==boundingBox.y2&&ctx.closePath(),pathParser.current=pathParser.start}}]),PathElement}(RenderedElement);function _isNativeReflectConstruct$9(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var SVGElement=function(_RenderedElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(SVGElement,_RenderedElement);var _super=function _createSuper$9(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$9()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(SVGElement);function SVGElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,SVGElement),(_this=_super.apply(this,arguments)).type="svg",_this.root=!1,_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(SVGElement,[{key:"clearContext",value:function clearContext(ctx){_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_42___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(SVGElement.prototype),"clearContext",this).call(this,ctx),this.document.screen.viewPort.removeCurrent()}},{key:"setContext",value:function setContext(ctx){var document=this.document,screen=document.screen,window=document.window,canvas=ctx.canvas;if(screen.setDefaults(ctx),canvas.style&&void 0!==ctx.font&&window&&void 0!==window.getComputedStyle){ctx.font=window.getComputedStyle(canvas).getPropertyValue("font");var fontSizeProp=new Property(document,"fontSize",Font.parse(ctx.font).fontSize);fontSizeProp.hasValue()&&(document.rootEmSize=fontSizeProp.getPixels("y"),document.emSize=document.rootEmSize)}_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_42___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(SVGElement.prototype),"setContext",this).call(this,ctx),this.getAttribute("x").hasValue()||this.getAttribute("x",!0).setValue(0),this.getAttribute("y").hasValue()||this.getAttribute("y",!0).setValue(0),ctx.translate(this.getAttribute("x").getPixels("x"),this.getAttribute("y").getPixels("y"));var _screen$viewPort=screen.viewPort,width=_screen$viewPort.width,height=_screen$viewPort.height;this.getStyle("width").hasValue()||this.getStyle("width",!0).setValue("100%"),this.getStyle("height").hasValue()||this.getStyle("height",!0).setValue("100%"),this.getStyle("color").hasValue()||this.getStyle("color",!0).setValue("black");var refXAttr=this.getAttribute("refX"),refYAttr=this.getAttribute("refY"),viewBoxAttr=this.getAttribute("viewBox"),viewBox=viewBoxAttr.hasValue()?toNumbers(viewBoxAttr.getString()):null,clip=!this.root&&"visible"!==this.getAttribute("overflow").getValue("hidden"),minX=0,minY=0,clipX=0,clipY=0;viewBox&&(minX=viewBox[0],minY=viewBox[1]),this.root||(width=this.getStyle("width").getPixels("x"),height=this.getStyle("height").getPixels("y"),"marker"===this.type&&(clipX=minX,clipY=minY,minX=0,minY=0)),screen.viewPort.setCurrent(width,height),viewBox&&(width=viewBox[2],height=viewBox[3]),document.setViewBox({ctx:ctx,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:screen.viewPort.width,desiredWidth:width,height:screen.viewPort.height,desiredHeight:height,minX:minX,minY:minY,refX:refXAttr.getValue(),refY:refYAttr.getValue(),clip:clip,clipX:clipX,clipY:clipY}),viewBox&&(screen.viewPort.removeCurrent(),screen.viewPort.setCurrent(width,height))}},{key:"resize",value:function resize(width){var height=arguments.length>1&&void 0!==arguments[1]?arguments[1]:width,preserveAspectRatio=arguments.length>2&&void 0!==arguments[2]&&arguments[2],widthAttr=this.getAttribute("width",!0),heightAttr=this.getAttribute("height",!0),viewBoxAttr=this.getAttribute("viewBox"),styleAttr=this.getAttribute("style"),originWidth=widthAttr.getNumber(0),originHeight=heightAttr.getNumber(0);if(preserveAspectRatio)if("string"==typeof preserveAspectRatio)this.getAttribute("preserveAspectRatio",!0).setValue(preserveAspectRatio);else{var preserveAspectRatioAttr=this.getAttribute("preserveAspectRatio");preserveAspectRatioAttr.hasValue()&&preserveAspectRatioAttr.setValue(preserveAspectRatioAttr.getString().replace(/^\s*(\S.*\S)\s*$/,"$1"))}if(widthAttr.setValue(width),heightAttr.setValue(height),viewBoxAttr.hasValue()||viewBoxAttr.setValue("0 0 ".concat(originWidth||width," ").concat(originHeight||height)),styleAttr.hasValue()){var widthStyle=this.getStyle("width"),heightStyle=this.getStyle("height");widthStyle.hasValue()&&widthStyle.setValue("".concat(width,"px")),heightStyle.hasValue()&&heightStyle.setValue("".concat(height,"px"))}}}]),SVGElement}(RenderedElement);function _isNativeReflectConstruct$a(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var RectElement=function(_PathElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(RectElement,_PathElement);var _super=function _createSuper$a(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$a()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(RectElement);function RectElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,RectElement),(_this=_super.apply(this,arguments)).type="rect",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(RectElement,[{key:"path",value:function path(ctx){var x=this.getAttribute("x").getPixels("x"),y=this.getAttribute("y").getPixels("y"),width=this.getStyle("width").getPixels("x"),height=this.getStyle("height").getPixels("y"),rxAttr=this.getAttribute("rx"),ryAttr=this.getAttribute("ry"),rx=rxAttr.getPixels("x"),ry=ryAttr.getPixels("y");if(rxAttr.hasValue()&&!ryAttr.hasValue()&&(ry=rx),ryAttr.hasValue()&&!rxAttr.hasValue()&&(rx=ry),rx=Math.min(rx,width/2),ry=Math.min(ry,height/2),ctx){var KAPPA=(Math.sqrt(2)-1)/3*4;ctx.beginPath(),height>0&&width>0&&(ctx.moveTo(x+rx,y),ctx.lineTo(x+width-rx,y),ctx.bezierCurveTo(x+width-rx+KAPPA*rx,y,x+width,y+ry-KAPPA*ry,x+width,y+ry),ctx.lineTo(x+width,y+height-ry),ctx.bezierCurveTo(x+width,y+height-ry+KAPPA*ry,x+width-rx+KAPPA*rx,y+height,x+width-rx,y+height),ctx.lineTo(x+rx,y+height),ctx.bezierCurveTo(x+rx-KAPPA*rx,y+height,x,y+height-ry+KAPPA*ry,x,y+height-ry),ctx.lineTo(x,y+ry),ctx.bezierCurveTo(x,y+ry-KAPPA*ry,x+rx-KAPPA*rx,y,x+rx,y),ctx.closePath())}return new BoundingBox(x,y,x+width,y+height)}},{key:"getMarkers",value:function getMarkers(){return null}}]),RectElement}(PathElement);function _isNativeReflectConstruct$b(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var CircleElement=function(_PathElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(CircleElement,_PathElement);var _super=function _createSuper$b(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$b()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(CircleElement);function CircleElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,CircleElement),(_this=_super.apply(this,arguments)).type="circle",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(CircleElement,[{key:"path",value:function path(ctx){var cx=this.getAttribute("cx").getPixels("x"),cy=this.getAttribute("cy").getPixels("y"),r=this.getAttribute("r").getPixels();return ctx&&r>0&&(ctx.beginPath(),ctx.arc(cx,cy,r,0,2*Math.PI,!1),ctx.closePath()),new BoundingBox(cx-r,cy-r,cx+r,cy+r)}},{key:"getMarkers",value:function getMarkers(){return null}}]),CircleElement}(PathElement);function _isNativeReflectConstruct$c(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var EllipseElement=function(_PathElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(EllipseElement,_PathElement);var _super=function _createSuper$c(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$c()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(EllipseElement);function EllipseElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,EllipseElement),(_this=_super.apply(this,arguments)).type="ellipse",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(EllipseElement,[{key:"path",value:function path(ctx){var KAPPA=(Math.sqrt(2)-1)/3*4,rx=this.getAttribute("rx").getPixels("x"),ry=this.getAttribute("ry").getPixels("y"),cx=this.getAttribute("cx").getPixels("x"),cy=this.getAttribute("cy").getPixels("y");return ctx&&rx>0&&ry>0&&(ctx.beginPath(),ctx.moveTo(cx+rx,cy),ctx.bezierCurveTo(cx+rx,cy+KAPPA*ry,cx+KAPPA*rx,cy+ry,cx,cy+ry),ctx.bezierCurveTo(cx-KAPPA*rx,cy+ry,cx-rx,cy+KAPPA*ry,cx-rx,cy),ctx.bezierCurveTo(cx-rx,cy-KAPPA*ry,cx-KAPPA*rx,cy-ry,cx,cy-ry),ctx.bezierCurveTo(cx+KAPPA*rx,cy-ry,cx+rx,cy-KAPPA*ry,cx+rx,cy),ctx.closePath()),new BoundingBox(cx-rx,cy-ry,cx+rx,cy+ry)}},{key:"getMarkers",value:function getMarkers(){return null}}]),EllipseElement}(PathElement);function _isNativeReflectConstruct$d(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var LineElement=function(_PathElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(LineElement,_PathElement);var _super=function _createSuper$d(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$d()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(LineElement);function LineElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,LineElement),(_this=_super.apply(this,arguments)).type="line",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(LineElement,[{key:"getPoints",value:function getPoints(){return[new Point(this.getAttribute("x1").getPixels("x"),this.getAttribute("y1").getPixels("y")),new Point(this.getAttribute("x2").getPixels("x"),this.getAttribute("y2").getPixels("y"))]}},{key:"path",value:function path(ctx){var _this$getPoints=this.getPoints(),_this$getPoints2=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_this$getPoints,2),_this$getPoints2$=_this$getPoints2[0],x0=_this$getPoints2$.x,y0=_this$getPoints2$.y,_this$getPoints2$2=_this$getPoints2[1],x1=_this$getPoints2$2.x,y1=_this$getPoints2$2.y;return ctx&&(ctx.beginPath(),ctx.moveTo(x0,y0),ctx.lineTo(x1,y1)),new BoundingBox(x0,y0,x1,y1)}},{key:"getMarkers",value:function getMarkers(){var _this$getPoints3=this.getPoints(),_this$getPoints4=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(_this$getPoints3,2),p0=_this$getPoints4[0],p1=_this$getPoints4[1],a=p0.angleTo(p1);return[[p0,a],[p1,a]]}}]),LineElement}(PathElement);function _isNativeReflectConstruct$e(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var PolylineElement=function(_PathElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(PolylineElement,_PathElement);var _super=function _createSuper$e(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$e()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(PolylineElement);function PolylineElement(document,node,captureTextNodes){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,PolylineElement),(_this=_super.call(this,document,node,captureTextNodes)).type="polyline",_this.points=[],_this.points=Point.parsePath(_this.getAttribute("points").getString()),_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(PolylineElement,[{key:"path",value:function path(ctx){var points=this.points,_points$=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(points,1)[0],x0=_points$.x,y0=_points$.y,boundingBox=new BoundingBox(x0,y0);return ctx&&(ctx.beginPath(),ctx.moveTo(x0,y0)),points.forEach((function(_ref){var x=_ref.x,y=_ref.y;boundingBox.addPoint(x,y),ctx&&ctx.lineTo(x,y)})),boundingBox}},{key:"getMarkers",value:function getMarkers(){var points=this.points,lastIndex=points.length-1,markers=[];return points.forEach((function(point,i){i!==lastIndex&&markers.push([point,point.angleTo(points[i+1])])})),markers.length>0&&markers.push([points[points.length-1],markers[markers.length-1][1]]),markers}}]),PolylineElement}(PathElement);function _isNativeReflectConstruct$f(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var PolygonElement=function(_PolylineElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(PolygonElement,_PolylineElement);var _super=function _createSuper$f(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$f()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(PolygonElement);function PolygonElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,PolygonElement),(_this=_super.apply(this,arguments)).type="polygon",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(PolygonElement,[{key:"path",value:function path(ctx){var boundingBox=_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_42___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(PolygonElement.prototype),"path",this).call(this,ctx),_this$points$=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(this.points,1)[0],x=_this$points$.x,y=_this$points$.y;return ctx&&(ctx.lineTo(x,y),ctx.closePath()),boundingBox}}]),PolygonElement}(PolylineElement);function _isNativeReflectConstruct$g(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var PatternElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(PatternElement,_Element);var _super=function _createSuper$g(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$g()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(PatternElement);function PatternElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,PatternElement),(_this=_super.apply(this,arguments)).type="pattern",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(PatternElement,[{key:"createPattern",value:function createPattern(ctx,_,parentOpacityProp){var width=this.getStyle("width").getPixels("x",!0),height=this.getStyle("height").getPixels("y",!0),patternSvg=new SVGElement(this.document,null);patternSvg.attributes.viewBox=new Property(this.document,"viewBox",this.getAttribute("viewBox").getValue()),patternSvg.attributes.width=new Property(this.document,"width","".concat(width,"px")),patternSvg.attributes.height=new Property(this.document,"height","".concat(height,"px")),patternSvg.attributes.transform=new Property(this.document,"transform",this.getAttribute("patternTransform").getValue()),patternSvg.children=this.children;var patternCanvas=this.document.createCanvas(width,height),patternCtx=patternCanvas.getContext("2d"),xAttr=this.getAttribute("x"),yAttr=this.getAttribute("y");xAttr.hasValue()&&yAttr.hasValue()&&patternCtx.translate(xAttr.getPixels("x",!0),yAttr.getPixels("y",!0)),parentOpacityProp.hasValue()?this.styles["fill-opacity"]=parentOpacityProp:Reflect.deleteProperty(this.styles,"fill-opacity");for(var x=-1;x<=1;x++)for(var y=-1;y<=1;y++)patternCtx.save(),patternSvg.attributes.x=new Property(this.document,"x",x*patternCanvas.width),patternSvg.attributes.y=new Property(this.document,"y",y*patternCanvas.height),patternSvg.render(patternCtx),patternCtx.restore();return ctx.createPattern(patternCanvas,"repeat")}}]),PatternElement}(Element);function _isNativeReflectConstruct$h(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var MarkerElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(MarkerElement,_Element);var _super=function _createSuper$h(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$h()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(MarkerElement);function MarkerElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,MarkerElement),(_this=_super.apply(this,arguments)).type="marker",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(MarkerElement,[{key:"render",value:function render(ctx,point,angle){if(point){var x=point.x,y=point.y,orient=this.getAttribute("orient").getValue("auto"),markerUnits=this.getAttribute("markerUnits").getValue("strokeWidth");ctx.translate(x,y),"auto"===orient&&ctx.rotate(angle),"strokeWidth"===markerUnits&&ctx.scale(ctx.lineWidth,ctx.lineWidth),ctx.save();var markerSvg=new SVGElement(this.document,null);markerSvg.type=this.type,markerSvg.attributes.viewBox=new Property(this.document,"viewBox",this.getAttribute("viewBox").getValue()),markerSvg.attributes.refX=new Property(this.document,"refX",this.getAttribute("refX").getValue()),markerSvg.attributes.refY=new Property(this.document,"refY",this.getAttribute("refY").getValue()),markerSvg.attributes.width=new Property(this.document,"width",this.getAttribute("markerWidth").getValue()),markerSvg.attributes.height=new Property(this.document,"height",this.getAttribute("markerHeight").getValue()),markerSvg.attributes.overflow=new Property(this.document,"overflow",this.getAttribute("overflow").getValue()),markerSvg.attributes.fill=new Property(this.document,"fill",this.getAttribute("fill").getColor("black")),markerSvg.attributes.stroke=new Property(this.document,"stroke",this.getAttribute("stroke").getValue("none")),markerSvg.children=this.children,markerSvg.render(ctx),ctx.restore(),"strokeWidth"===markerUnits&&ctx.scale(1/ctx.lineWidth,1/ctx.lineWidth),"auto"===orient&&ctx.rotate(-angle),ctx.translate(-x,-y)}}}]),MarkerElement}(Element);function _isNativeReflectConstruct$i(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var DefsElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(DefsElement,_Element);var _super=function _createSuper$i(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$i()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(DefsElement);function DefsElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,DefsElement),(_this=_super.apply(this,arguments)).type="defs",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(DefsElement,[{key:"render",value:function render(){}}]),DefsElement}(Element);function _isNativeReflectConstruct$j(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var GElement=function(_RenderedElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(GElement,_RenderedElement);var _super=function _createSuper$j(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$j()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(GElement);function GElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,GElement),(_this=_super.apply(this,arguments)).type="g",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(GElement,[{key:"getBoundingBox",value:function getBoundingBox(ctx){var boundingBox=new BoundingBox;return this.children.forEach((function(child){boundingBox.addBoundingBox(child.getBoundingBox(ctx))})),boundingBox}}]),GElement}(RenderedElement);function _isNativeReflectConstruct$k(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var GradientElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(GradientElement,_Element);var _super=function _createSuper$k(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$k()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(GradientElement);function GradientElement(document,node,captureTextNodes){var _this;_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,GradientElement),(_this=_super.call(this,document,node,captureTextNodes)).attributesToInherit=["gradientUnits"],_this.stops=[];var _assertThisInitialize=_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_46___default()(_this),stops=_assertThisInitialize.stops;return _assertThisInitialize.children.forEach((function(child){"stop"===child.type&&stops.push(child)})),_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(GradientElement,[{key:"getGradientUnits",value:function getGradientUnits(){return this.getAttribute("gradientUnits").getString("objectBoundingBox")}},{key:"createGradient",value:function createGradient(ctx,element,parentOpacityProp){var _this2=this,stopsContainer=this;this.getHrefAttribute().hasValue()&&(stopsContainer=this.getHrefAttribute().getDefinition(),this.inheritStopContainer(stopsContainer));var stops=stopsContainer.stops,gradient=this.getGradient(ctx,element);if(!gradient)return this.addParentOpacity(parentOpacityProp,stops[stops.length-1].color);if(stops.forEach((function(stop){gradient.addColorStop(stop.offset,_this2.addParentOpacity(parentOpacityProp,stop.color))})),this.getAttribute("gradientTransform").hasValue()){var document=this.document,_document$screen=document.screen,MAX_VIRTUAL_PIXELS=_document$screen.MAX_VIRTUAL_PIXELS,viewPort=_document$screen.viewPort,rootView=_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_6___default()(viewPort.viewPorts,1)[0],rect=new RectElement(document,null);rect.attributes.x=new Property(document,"x",-MAX_VIRTUAL_PIXELS/3),rect.attributes.y=new Property(document,"y",-MAX_VIRTUAL_PIXELS/3),rect.attributes.width=new Property(document,"width",MAX_VIRTUAL_PIXELS),rect.attributes.height=new Property(document,"height",MAX_VIRTUAL_PIXELS);var group=new GElement(document,null);group.attributes.transform=new Property(document,"transform",this.getAttribute("gradientTransform").getValue()),group.children=[rect];var patternSvg=new SVGElement(document,null);patternSvg.attributes.x=new Property(document,"x",0),patternSvg.attributes.y=new Property(document,"y",0),patternSvg.attributes.width=new Property(document,"width",rootView.width),patternSvg.attributes.height=new Property(document,"height",rootView.height),patternSvg.children=[group];var patternCanvas=document.createCanvas(rootView.width,rootView.height),patternCtx=patternCanvas.getContext("2d");return patternCtx.fillStyle=gradient,patternSvg.render(patternCtx),patternCtx.createPattern(patternCanvas,"no-repeat")}return gradient}},{key:"inheritStopContainer",value:function inheritStopContainer(stopsContainer){var _this3=this;this.attributesToInherit.forEach((function(attributeToInherit){!_this3.getAttribute(attributeToInherit).hasValue()&&stopsContainer.getAttribute(attributeToInherit).hasValue()&&_this3.getAttribute(attributeToInherit,!0).setValue(stopsContainer.getAttribute(attributeToInherit).getValue())}))}},{key:"addParentOpacity",value:function addParentOpacity(parentOpacityProp,color){return parentOpacityProp.hasValue()?new Property(this.document,"color",color).addOpacity(parentOpacityProp).getColor():color}}]),GradientElement}(Element);function _isNativeReflectConstruct$l(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var LinearGradientElement=function(_GradientElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(LinearGradientElement,_GradientElement);var _super=function _createSuper$l(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$l()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(LinearGradientElement);function LinearGradientElement(document,node,captureTextNodes){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,LinearGradientElement),(_this=_super.call(this,document,node,captureTextNodes)).type="linearGradient",_this.attributesToInherit.push("x1","y1","x2","y2"),_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(LinearGradientElement,[{key:"getGradient",value:function getGradient(ctx,element){var isBoundingBoxUnits="objectBoundingBox"===this.getGradientUnits(),boundingBox=isBoundingBoxUnits?element.getBoundingBox(ctx):null;if(isBoundingBoxUnits&&!boundingBox)return null;this.getAttribute("x1").hasValue()||this.getAttribute("y1").hasValue()||this.getAttribute("x2").hasValue()||this.getAttribute("y2").hasValue()||(this.getAttribute("x1",!0).setValue(0),this.getAttribute("y1",!0).setValue(0),this.getAttribute("x2",!0).setValue(1),this.getAttribute("y2",!0).setValue(0));var x1=isBoundingBoxUnits?boundingBox.x+boundingBox.width*this.getAttribute("x1").getNumber():this.getAttribute("x1").getPixels("x"),y1=isBoundingBoxUnits?boundingBox.y+boundingBox.height*this.getAttribute("y1").getNumber():this.getAttribute("y1").getPixels("y"),x2=isBoundingBoxUnits?boundingBox.x+boundingBox.width*this.getAttribute("x2").getNumber():this.getAttribute("x2").getPixels("x"),y2=isBoundingBoxUnits?boundingBox.y+boundingBox.height*this.getAttribute("y2").getNumber():this.getAttribute("y2").getPixels("y");return x1===x2&&y1===y2?null:ctx.createLinearGradient(x1,y1,x2,y2)}}]),LinearGradientElement}(GradientElement);function _isNativeReflectConstruct$m(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var RadialGradientElement=function(_GradientElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(RadialGradientElement,_GradientElement);var _super=function _createSuper$m(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$m()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(RadialGradientElement);function RadialGradientElement(document,node,captureTextNodes){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,RadialGradientElement),(_this=_super.call(this,document,node,captureTextNodes)).type="radialGradient",_this.attributesToInherit.push("cx","cy","r","fx","fy","fr"),_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(RadialGradientElement,[{key:"getGradient",value:function getGradient(ctx,element){var isBoundingBoxUnits="objectBoundingBox"===this.getGradientUnits(),boundingBox=element.getBoundingBox(ctx);if(isBoundingBoxUnits&&!boundingBox)return null;this.getAttribute("cx").hasValue()||this.getAttribute("cx",!0).setValue("50%"),this.getAttribute("cy").hasValue()||this.getAttribute("cy",!0).setValue("50%"),this.getAttribute("r").hasValue()||this.getAttribute("r",!0).setValue("50%");var cx=isBoundingBoxUnits?boundingBox.x+boundingBox.width*this.getAttribute("cx").getNumber():this.getAttribute("cx").getPixels("x"),cy=isBoundingBoxUnits?boundingBox.y+boundingBox.height*this.getAttribute("cy").getNumber():this.getAttribute("cy").getPixels("y"),fx=cx,fy=cy;this.getAttribute("fx").hasValue()&&(fx=isBoundingBoxUnits?boundingBox.x+boundingBox.width*this.getAttribute("fx").getNumber():this.getAttribute("fx").getPixels("x")),this.getAttribute("fy").hasValue()&&(fy=isBoundingBoxUnits?boundingBox.y+boundingBox.height*this.getAttribute("fy").getNumber():this.getAttribute("fy").getPixels("y"));var r=isBoundingBoxUnits?(boundingBox.width+boundingBox.height)/2*this.getAttribute("r").getNumber():this.getAttribute("r").getPixels(),fr=this.getAttribute("fr").getPixels();return ctx.createRadialGradient(fx,fy,fr,cx,cy,r)}}]),RadialGradientElement}(GradientElement);function _isNativeReflectConstruct$n(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var StopElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(StopElement,_Element);var _super=function _createSuper$n(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$n()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(StopElement);function StopElement(document,node,captureTextNodes){var _this;_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,StopElement),(_this=_super.call(this,document,node,captureTextNodes)).type="stop";var offset=Math.max(0,Math.min(1,_this.getAttribute("offset").getNumber())),stopOpacity=_this.getStyle("stop-opacity"),stopColor=_this.getStyle("stop-color",!0);return""===stopColor.getString()&&stopColor.setValue("#000"),stopOpacity.hasValue()&&(stopColor=stopColor.addOpacity(stopOpacity)),_this.offset=offset,_this.color=stopColor.getColor(),_this}return StopElement}(Element);function _isNativeReflectConstruct$o(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var AnimateElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(AnimateElement,_Element);var _super=function _createSuper$o(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$o()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(AnimateElement);function AnimateElement(document,node,captureTextNodes){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,AnimateElement),(_this=_super.call(this,document,node,captureTextNodes)).type="animate",_this.duration=0,_this.initialValue=null,_this.initialUnits="",_this.removed=!1,_this.frozen=!1,document.screen.animations.push(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_46___default()(_this)),_this.begin=_this.getAttribute("begin").getMilliseconds(),_this.maxDuration=_this.begin+_this.getAttribute("dur").getMilliseconds(),_this.from=_this.getAttribute("from"),_this.to=_this.getAttribute("to"),_this.values=_this.getAttribute("values"),_this.values.hasValue()&&_this.values.setValue(_this.values.getString().split(";")),_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(AnimateElement,[{key:"getProperty",value:function getProperty(){var attributeType=this.getAttribute("attributeType").getString(),attributeName=this.getAttribute("attributeName").getString();return"CSS"===attributeType?this.parent.getStyle(attributeName,!0):this.parent.getAttribute(attributeName,!0)}},{key:"calcValue",value:function calcValue(){var initialUnits=this.initialUnits,_this$getProgress=this.getProgress(),progress=_this$getProgress.progress,from=_this$getProgress.from,to=_this$getProgress.to,newValue=from.getNumber()+(to.getNumber()-from.getNumber())*progress;return"%"===initialUnits&&(newValue*=100),"".concat(newValue).concat(initialUnits)}},{key:"update",value:function update(delta){var parent=this.parent,prop=this.getProperty();if(this.initialValue||(this.initialValue=prop.getString(),this.initialUnits=prop.getUnits()),this.duration>this.maxDuration){var fill=this.getAttribute("fill").getString("remove");if("indefinite"===this.getAttribute("repeatCount").getString()||"indefinite"===this.getAttribute("repeatDur").getString())this.duration=0;else if("freeze"!==fill||this.frozen){if("remove"===fill&&!this.removed)return this.removed=!0,prop.setValue(parent.animationFrozen?parent.animationFrozenValue:this.initialValue),!0}else this.frozen=!0,parent.animationFrozen=!0,parent.animationFrozenValue=prop.getString();return!1}this.duration+=delta;var updated=!1;if(this.begin<this.duration){var newValue=this.calcValue(),typeAttr=this.getAttribute("type");if(typeAttr.hasValue()){var type=typeAttr.getString();newValue="".concat(type,"(").concat(newValue,")")}prop.setValue(newValue),updated=!0}return updated}},{key:"getProgress",value:function getProgress(){var document=this.document,values=this.values,result={progress:(this.duration-this.begin)/(this.maxDuration-this.begin)};if(values.hasValue()){var p=result.progress*(values.getValue().length-1),lb=Math.floor(p),ub=Math.ceil(p);result.from=new Property(document,"from",parseFloat(values.getValue()[lb])),result.to=new Property(document,"to",parseFloat(values.getValue()[ub])),result.progress=(p-lb)/(ub-lb)}else result.from=this.from,result.to=this.to;return result}}]),AnimateElement}(Element);function _isNativeReflectConstruct$p(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var AnimateColorElement=function(_AnimateElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(AnimateColorElement,_AnimateElement);var _super=function _createSuper$p(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$p()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(AnimateColorElement);function AnimateColorElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,AnimateColorElement),(_this=_super.apply(this,arguments)).type="animateColor",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(AnimateColorElement,[{key:"calcValue",value:function calcValue(){var _this$getProgress=this.getProgress(),progress=_this$getProgress.progress,from=_this$getProgress.from,to=_this$getProgress.to,colorFrom=new rgbcolor__WEBPACK_IMPORTED_MODULE_27___default.a(from.getColor()),colorTo=new rgbcolor__WEBPACK_IMPORTED_MODULE_27___default.a(to.getColor());if(colorFrom.ok&&colorTo.ok){var r=colorFrom.r+(colorTo.r-colorFrom.r)*progress,g=colorFrom.g+(colorTo.g-colorFrom.g)*progress,b=colorFrom.b+(colorTo.b-colorFrom.b)*progress;return"rgb(".concat(parseInt(r,10),", ").concat(parseInt(g,10),", ").concat(parseInt(b,10),")")}return this.getAttribute("from").getColor()}}]),AnimateColorElement}(AnimateElement);function _isNativeReflectConstruct$q(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var AnimateTransformElement=function(_AnimateElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(AnimateTransformElement,_AnimateElement);var _super=function _createSuper$q(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$q()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(AnimateTransformElement);function AnimateTransformElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,AnimateTransformElement),(_this=_super.apply(this,arguments)).type="animateTransform",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(AnimateTransformElement,[{key:"calcValue",value:function calcValue(){var _this$getProgress=this.getProgress(),progress=_this$getProgress.progress,from=_this$getProgress.from,to=_this$getProgress.to,transformFrom=toNumbers(from.getString()),transformTo=toNumbers(to.getString());return transformFrom.map((function(from,i){return from+(transformTo[i]-from)*progress})).join(" ")}}]),AnimateTransformElement}(AnimateElement);function _createForOfIteratorHelper(o){if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(o=function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(o))){var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var it,err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _isNativeReflectConstruct$r(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var FontElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(FontElement,_Element);var _super=function _createSuper$r(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$r()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(FontElement);function FontElement(document,node,captureTextNodes){var _this;_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,FontElement),(_this=_super.call(this,document,node,captureTextNodes)).type="font",_this.glyphs={},_this.horizAdvX=_this.getAttribute("horiz-adv-x").getNumber();var _step,definitions=document.definitions,_iterator=_createForOfIteratorHelper(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_46___default()(_this).children);try{for(_iterator.s();!(_step=_iterator.n()).done;){var child=_step.value;switch(child.type){case"font-face":_this.fontFace=child;var fontFamilyStyle=child.getStyle("font-family");fontFamilyStyle.hasValue()&&(definitions[fontFamilyStyle.getString()]=_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_46___default()(_this));break;case"missing-glyph":_this.missingGlyph=child;break;case"glyph":var glyph=child;glyph.arabicForm?(_this.isRTL=!0,_this.isArabic=!0,void 0===_this.glyphs[glyph.unicode]&&(_this.glyphs[glyph.unicode]={}),_this.glyphs[glyph.unicode][glyph.arabicForm]=glyph):_this.glyphs[glyph.unicode]=glyph}}}catch(err){_iterator.e(err)}finally{_iterator.f()}return _this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(FontElement,[{key:"render",value:function render(){}}]),FontElement}(Element);function _isNativeReflectConstruct$s(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var FontFaceElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(FontFaceElement,_Element);var _super=function _createSuper$s(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$s()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(FontFaceElement);function FontFaceElement(document,node,captureTextNodes){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,FontFaceElement),(_this=_super.call(this,document,node,captureTextNodes)).type="font-face",_this.ascent=_this.getAttribute("ascent").getNumber(),_this.descent=_this.getAttribute("descent").getNumber(),_this.unitsPerEm=_this.getAttribute("units-per-em").getNumber(),_this}return FontFaceElement}(Element);function _isNativeReflectConstruct$t(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var MissingGlyphElement=function(_PathElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(MissingGlyphElement,_PathElement);var _super=function _createSuper$t(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$t()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(MissingGlyphElement);function MissingGlyphElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,MissingGlyphElement),(_this=_super.apply(this,arguments)).type="missing-glyph",_this.horizAdvX=0,_this}return MissingGlyphElement}(PathElement);function _isNativeReflectConstruct$u(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var GlyphElement=function(_PathElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(GlyphElement,_PathElement);var _super=function _createSuper$u(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$u()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(GlyphElement);function GlyphElement(document,node,captureTextNodes){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,GlyphElement),(_this=_super.call(this,document,node,captureTextNodes)).type="glyph",_this.horizAdvX=_this.getAttribute("horiz-adv-x").getNumber(),_this.unicode=_this.getAttribute("unicode").getString(),_this.arabicForm=_this.getAttribute("arabic-form").getString(),_this}return GlyphElement}(PathElement);function _isNativeReflectConstruct$v(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var TRefElement=function(_TextElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(TRefElement,_TextElement);var _super=function _createSuper$v(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$v()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(TRefElement);function TRefElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,TRefElement),(_this=_super.apply(this,arguments)).type="tref",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(TRefElement,[{key:"getText",value:function getText(){var element=this.getHrefAttribute().getDefinition();if(element){var firstChild=element.children[0];if(firstChild)return firstChild.getText()}return""}}]),TRefElement}(TextElement);function _isNativeReflectConstruct$w(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var AElement=function(_TextElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(AElement,_TextElement);var _super=function _createSuper$w(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$w()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(AElement);function AElement(document,node,captureTextNodes){var _this;_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,AElement),(_this=_super.call(this,document,node,captureTextNodes)).type="a";var childNodes=node.childNodes,firstChild=childNodes[0],hasText=childNodes.length>0&&Array.from(childNodes).every((function(node){return 3===node.nodeType}));return _this.hasText=hasText,_this.text=hasText?_this.getTextFromNode(firstChild):"",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(AElement,[{key:"getText",value:function getText(){return this.text}},{key:"renderChildren",value:function renderChildren(ctx){if(this.hasText){_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_42___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(AElement.prototype),"renderChildren",this).call(this,ctx);var document=this.document,x=this.x,y=this.y,mouse=document.screen.mouse,fontSize=new Property(document,"fontSize",Font.parse(document.ctx.font).fontSize);mouse.isWorking()&&mouse.checkBoundingBox(this,new BoundingBox(x,y-fontSize.getPixels("y"),x+this.measureText(ctx),y))}else if(this.children.length>0){var g=new GElement(this.document,null);g.children=this.children,g.parent=this,g.render(ctx)}}},{key:"onClick",value:function onClick(){var window=this.document.window;window&&window.open(this.getHrefAttribute().getString())}},{key:"onMouseMove",value:function onMouseMove(){this.document.ctx.canvas.style.cursor="pointer"}}]),AElement}(TextElement);function _createForOfIteratorHelper$1(o){if("undefined"==typeof Symbol||null==o[Symbol.iterator]){if(Array.isArray(o)||(o=function _unsupportedIterableToArray$1(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray$1(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray$1(o,minLen)}(o))){var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var it,err,normalCompletion=!0,didErr=!1;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}function _arrayLikeToArray$1(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _isNativeReflectConstruct$x(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var TextPathElement=function(_TextElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(TextPathElement,_TextElement);var _super=function _createSuper$x(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$x()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(TextPathElement);function TextPathElement(document,node,captureTextNodes){var _this;_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,TextPathElement),(_this=_super.call(this,document,node,captureTextNodes)).type="textPath",_this.textWidth=0,_this.textHeight=0,_this.pathLength=-1,_this.glyphInfo=null,_this.letterSpacingCache=[],_this.measuresCache=new Map([["",0]]);var pathElement=_this.getHrefAttribute().getDefinition();return _this.text=_this.getTextFromNode(),_this.dataArray=_this.parsePathData(pathElement),_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(TextPathElement,[{key:"getText",value:function getText(){return this.text}},{key:"path",value:function path(ctx){var dataArray=this.dataArray;ctx&&ctx.beginPath(),dataArray.forEach((function(_ref){var command=_ref.command,points=_ref.points;switch(command){case"L":ctx&&ctx.lineTo(points[0],points[1]);break;case"M":ctx&&ctx.moveTo(points[0],points[1]);break;case"C":ctx&&ctx.bezierCurveTo(points[0],points[1],points[2],points[3],points[4],points[5]);break;case"Q":ctx&&ctx.quadraticCurveTo(points[0],points[1],points[2],points[3]);break;case"A":var cx=points[0],cy=points[1],rx=points[2],ry=points[3],theta=points[4],dTheta=points[5],psi=points[6],fs=points[7],r=rx>ry?rx:ry,scaleX=rx>ry?1:rx/ry,scaleY=rx>ry?ry/rx:1;ctx&&(ctx.translate(cx,cy),ctx.rotate(psi),ctx.scale(scaleX,scaleY),ctx.arc(0,0,r,theta,theta+dTheta,Boolean(1-fs)),ctx.scale(1/scaleX,1/scaleY),ctx.rotate(-psi),ctx.translate(-cx,-cy));break;case"z":ctx&&ctx.closePath()}}))}},{key:"renderChildren",value:function renderChildren(ctx){this.setTextData(ctx),ctx.save();var textDecoration=this.parent.getStyle("text-decoration").getString(),fontSize=this.getFontSize(),glyphInfo=this.glyphInfo,fill=ctx.fillStyle;"underline"===textDecoration&&ctx.beginPath(),glyphInfo.forEach((function(glyph,i){var p0=glyph.p0,p1=glyph.p1,partialText=glyph.text;ctx.save(),ctx.translate(p0.x,p0.y),ctx.rotate(glyphInfo[i].rotation),ctx.fillStyle&&ctx.fillText(partialText,0,0),ctx.strokeStyle&&ctx.strokeText(partialText,0,0),ctx.restore(),"underline"===textDecoration&&(0===i&&ctx.moveTo(p0.x,p0.y+fontSize/8),ctx.lineTo(p1.x,p1.y+fontSize/5))})),"underline"===textDecoration&&(ctx.lineWidth=fontSize/20,ctx.strokeStyle=fill,ctx.stroke(),ctx.closePath()),ctx.restore()}},{key:"getLetterSpacingAt",value:function getLetterSpacingAt(){var idx=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.letterSpacingCache[idx]||0}},{key:"findSegmentToFitChar",value:function findSegmentToFitChar(ctx,anchor,textFullWidth,fullPathWidth,spacesNumber,inputOffset,c,charI){var offset=inputOffset,glyphWidth=this.measureText(ctx,c);" "===c&&"justify"===anchor&&textFullWidth<fullPathWidth&&(glyphWidth+=(fullPathWidth-textFullWidth)/spacesNumber),charI>-1&&(offset+=this.getLetterSpacingAt(charI));var splineStep=this.textHeight/20,segment={p0:this.getEquidistantPointOnPath(offset,splineStep),p1:this.getEquidistantPointOnPath(offset+glyphWidth,splineStep)};return{offset:offset+=glyphWidth,segment:segment}}},{key:"measureText",value:function measureText(ctx,text){var measuresCache=this.measuresCache,targetText=text||this.getText();if(measuresCache.has(targetText))return measuresCache.get(targetText);var measure=this.measureTargetText(ctx,targetText);return measuresCache.set(targetText,measure),measure}},{key:"setTextData",value:function setTextData(ctx){var _this2=this;if(!this.glyphInfo){var renderText=this.getText(),chars=renderText.split(""),spacesNumber=renderText.split(" ").length-1,dx=toNumbers(this.parent.getAttribute("dx").getString("0")),anchor=this.parent.getStyle("text-anchor").getString("start"),thisSpacing=this.getStyle("letter-spacing"),parentSpacing=this.parent.getStyle("letter-spacing"),letterSpacing=0;thisSpacing.hasValue()&&"inherit"!==thisSpacing.getValue()?thisSpacing.hasValue()&&"initial"!==thisSpacing.getValue()&&"unset"!==thisSpacing.getValue()&&(letterSpacing=thisSpacing.getPixels()):letterSpacing=parentSpacing.getPixels();var letterSpacingCache=[],textLen=renderText.length;this.letterSpacingCache=letterSpacingCache;for(var i=0;i<textLen;i++)letterSpacingCache.push(void 0!==dx[i]?dx[i]:letterSpacing);var dxSum=letterSpacingCache.reduce((function(acc,cur){return acc+cur||0}),0);this.textWidth=this.measureText(ctx),this.textHeight=this.getFontSize();var textFullWidth=Math.max(this.textWidth+dxSum,0);this.glyphInfo=[];var fullPathWidth=this.getPathLength(),startOffset=this.getStyle("startOffset").getNumber(0)*fullPathWidth,offset=0;"middle"!==anchor&&"center"!==anchor||(offset=-textFullWidth/2),"end"!==anchor&&"right"!==anchor||(offset=-textFullWidth),offset+=startOffset,chars.forEach((function(char,i){var _this2$findSegmentToF=_this2.findSegmentToFitChar(ctx,anchor,textFullWidth,fullPathWidth,spacesNumber,offset,char,i),nextOffset=_this2$findSegmentToF.offset,segment=_this2$findSegmentToF.segment;if(offset=nextOffset,segment.p0&&segment.p1){var width=_this2.getLineLength(segment.p0.x,segment.p0.y,segment.p1.x,segment.p1.y),midpoint=_this2.getPointOnLine(0+width/2,segment.p0.x,segment.p0.y,segment.p1.x,segment.p1.y),rotation=Math.atan2(segment.p1.y-segment.p0.y,segment.p1.x-segment.p0.x);_this2.glyphInfo.push({transposeX:midpoint.x,transposeY:midpoint.y,text:chars[i],p0:segment.p0,p1:segment.p1,rotation:rotation})}}))}}},{key:"parsePathData",value:function parsePathData(path){if(this.pathLength=-1,!path)return[];var pathCommands=[],pathParser=path.pathParser;for(pathParser.reset();!pathParser.isEnd();){var current=pathParser.current,startX=current?current.x:0,startY=current?current.y:0,cmd="",points=[];pathParser.nextCommand();var upperCommand=pathParser.command.toUpperCase();switch(pathParser.command){case"M":case"m":cmd=this.pathM(pathParser,points);break;case"L":case"l":cmd=this.pathL(pathParser,points);break;case"H":case"h":cmd=this.pathH(pathParser,points);break;case"V":case"v":cmd=this.pathV(pathParser,points);break;case"C":case"c":this.pathC(pathParser,points);break;case"S":case"s":cmd=this.pathS(pathParser,points);break;case"Q":case"q":this.pathQ(pathParser,points);break;case"T":case"t":cmd=this.pathT(pathParser,points);break;case"A":case"a":points=this.pathA(pathParser);break;case"Z":case"z":pathParser.current=pathParser.start}"Z"!==upperCommand?pathCommands.push({command:cmd||upperCommand,points:points,start:{x:startX,y:startY},pathLength:this.calcLength(startX,startY,cmd||upperCommand,points)}):pathCommands.push({command:"z",points:[],pathLength:0})}return pathCommands}},{key:"pathM",value:function pathM(pathParser,points){var p=pathParser.getAsCurrentPoint();for(points.push(p.x,p.y),pathParser.start=pathParser.current;!pathParser.isCommandOrEnd();){var _p=pathParser.getAsCurrentPoint();return points.push(_p.x,_p.y),"L"}}},{key:"pathL",value:function pathL(pathParser,points){for(;!pathParser.isCommandOrEnd();){var p=pathParser.getAsCurrentPoint();points.push(p.x,p.y)}return"L"}},{key:"pathH",value:function pathH(pathParser,points){for(;!pathParser.isCommandOrEnd();){var current=pathParser.current,point=new Point((pathParser.isRelativeCommand()?current.x:0)+pathParser.getScalar(),current.y);points.push(point.x,point.y),pathParser.current=point}return"L"}},{key:"pathV",value:function pathV(pathParser,points){for(;!pathParser.isCommandOrEnd();){var current=pathParser.current,point=new Point(current.x,(pathParser.isRelativeCommand()?current.y:0)+pathParser.getScalar());points.push(point.x,point.y),pathParser.current=point}return"L"}},{key:"pathC",value:function pathC(pathParser,points){for(;!pathParser.isCommandOrEnd();){var point=pathParser.getPoint(),controlPoint=pathParser.getAsControlPoint(),currentPoint=pathParser.getAsCurrentPoint();points.push(point.x,point.y,controlPoint.x,controlPoint.y,currentPoint.x,currentPoint.y)}}},{key:"pathS",value:function pathS(pathParser,points){for(;!pathParser.isCommandOrEnd();){var point=pathParser.getReflectedControlPoint(),controlPoint=pathParser.getAsControlPoint(),currentPoint=pathParser.getAsCurrentPoint();points.push(point.x,point.y,controlPoint.x,controlPoint.y,currentPoint.x,currentPoint.y)}return"C"}},{key:"pathQ",value:function pathQ(pathParser,points){for(;!pathParser.isCommandOrEnd();){var controlPoint=pathParser.getAsControlPoint(),currentPoint=pathParser.getAsCurrentPoint();points.push(controlPoint.x,controlPoint.y,currentPoint.x,currentPoint.y)}}},{key:"pathT",value:function pathT(pathParser,points){for(;!pathParser.isCommandOrEnd();){var controlPoint=pathParser.getReflectedControlPoint();pathParser.control=controlPoint;var currentPoint=pathParser.getAsCurrentPoint();points.push(controlPoint.x,controlPoint.y,currentPoint.x,currentPoint.y)}return"Q"}},{key:"pathA",value:function pathA(pathParser){for(;!pathParser.isCommandOrEnd();){var current=pathParser.current,rx=pathParser.getScalar(),ry=pathParser.getScalar(),xAxisRotation=pathParser.getScalar()*(Math.PI/180),largeArcFlag=pathParser.getScalar(),sweepFlag=pathParser.getScalar(),currentPoint=pathParser.getAsCurrentPoint(),currp=new Point(Math.cos(xAxisRotation)*(current.x-currentPoint.x)/2+Math.sin(xAxisRotation)*(current.y-currentPoint.y)/2,-Math.sin(xAxisRotation)*(current.x-currentPoint.x)/2+Math.cos(xAxisRotation)*(current.y-currentPoint.y)/2),l=Math.pow(currp.x,2)/Math.pow(rx,2)+Math.pow(currp.y,2)/Math.pow(ry,2);l>1&&(rx*=Math.sqrt(l),ry*=Math.sqrt(l));var s=(largeArcFlag===sweepFlag?-1:1)*Math.sqrt((Math.pow(rx,2)*Math.pow(ry,2)-Math.pow(rx,2)*Math.pow(currp.y,2)-Math.pow(ry,2)*Math.pow(currp.x,2))/(Math.pow(rx,2)*Math.pow(currp.y,2)+Math.pow(ry,2)*Math.pow(currp.x,2)));isNaN(s)&&(s=0);var cpp=new Point(s*rx*currp.y/ry,s*-ry*currp.x/rx),centp=new Point((current.x+currentPoint.x)/2+Math.cos(xAxisRotation)*cpp.x-Math.sin(xAxisRotation)*cpp.y,(current.y+currentPoint.y)/2+Math.sin(xAxisRotation)*cpp.x+Math.cos(xAxisRotation)*cpp.y),a1=vectorsAngle([1,0],[(currp.x-cpp.x)/rx,(currp.y-cpp.y)/ry]),u=[(currp.x-cpp.x)/rx,(currp.y-cpp.y)/ry],v=[(-currp.x-cpp.x)/rx,(-currp.y-cpp.y)/ry],ad=vectorsAngle(u,v);return vectorsRatio(u,v)<=-1&&(ad=Math.PI),vectorsRatio(u,v)>=1&&(ad=0),0===sweepFlag&&ad>0&&(ad-=2*Math.PI),1===sweepFlag&&ad<0&&(ad+=2*Math.PI),[centp.x,centp.y,rx,ry,a1,ad,xAxisRotation,sweepFlag]}}},{key:"calcLength",value:function calcLength(x,y,cmd,points){var len=0,p1=null,p2=null,t=0;switch(cmd){case"L":return this.getLineLength(x,y,points[0],points[1]);case"C":for(len=0,p1=this.getPointOnCubicBezier(0,x,y,points[0],points[1],points[2],points[3],points[4],points[5]),t=.01;t<=1;t+=.01)p2=this.getPointOnCubicBezier(t,x,y,points[0],points[1],points[2],points[3],points[4],points[5]),len+=this.getLineLength(p1.x,p1.y,p2.x,p2.y),p1=p2;return len;case"Q":for(len=0,p1=this.getPointOnQuadraticBezier(0,x,y,points[0],points[1],points[2],points[3]),t=.01;t<=1;t+=.01)p2=this.getPointOnQuadraticBezier(t,x,y,points[0],points[1],points[2],points[3]),len+=this.getLineLength(p1.x,p1.y,p2.x,p2.y),p1=p2;return len;case"A":len=0;var start=points[4],dTheta=points[5],end=points[4]+dTheta,inc=Math.PI/180;if(Math.abs(start-end)<inc&&(inc=Math.abs(start-end)),p1=this.getPointOnEllipticalArc(points[0],points[1],points[2],points[3],start,0),dTheta<0)for(t=start-inc;t>end;t-=inc)p2=this.getPointOnEllipticalArc(points[0],points[1],points[2],points[3],t,0),len+=this.getLineLength(p1.x,p1.y,p2.x,p2.y),p1=p2;else for(t=start+inc;t<end;t+=inc)p2=this.getPointOnEllipticalArc(points[0],points[1],points[2],points[3],t,0),len+=this.getLineLength(p1.x,p1.y,p2.x,p2.y),p1=p2;return p2=this.getPointOnEllipticalArc(points[0],points[1],points[2],points[3],end,0),len+=this.getLineLength(p1.x,p1.y,p2.x,p2.y)}return 0}},{key:"getPointOnLine",value:function getPointOnLine(dist,P1x,P1y,P2x,P2y){var fromX=arguments.length>5&&void 0!==arguments[5]?arguments[5]:P1x,fromY=arguments.length>6&&void 0!==arguments[6]?arguments[6]:P1y,m=(P2y-P1y)/(P2x-P1x+PSEUDO_ZERO),run=Math.sqrt(dist*dist/(1+m*m));P2x<P1x&&(run*=-1);var rise=m*run,pt=null;if(P2x===P1x)pt={x:fromX,y:fromY+rise};else if((fromY-P1y)/(fromX-P1x+PSEUDO_ZERO)===m)pt={x:fromX+run,y:fromY+rise};else{var ix=0,iy=0,len=this.getLineLength(P1x,P1y,P2x,P2y);if(len<PSEUDO_ZERO)return null;var u=(fromX-P1x)*(P2x-P1x)+(fromY-P1y)*(P2y-P1y);ix=P1x+(u/=len*len)*(P2x-P1x),iy=P1y+u*(P2y-P1y);var pRise=this.getLineLength(fromX,fromY,ix,iy),pRun=Math.sqrt(dist*dist-pRise*pRise);run=Math.sqrt(pRun*pRun/(1+m*m)),P2x<P1x&&(run*=-1),pt={x:ix+run,y:iy+(rise=m*run)}}return pt}},{key:"getPointOnPath",value:function getPointOnPath(distance){var fullLen=this.getPathLength(),cumulativePathLength=0,p=null;if(distance<-5e-5||distance-5e-5>fullLen)return null;var _step,_iterator=_createForOfIteratorHelper$1(this.dataArray);try{for(_iterator.s();!(_step=_iterator.n()).done;){var pathCmd=_step.value;if(!pathCmd||!(pathCmd.pathLength<5e-5||cumulativePathLength+pathCmd.pathLength+5e-5<distance)){var delta=distance-cumulativePathLength,currentT=0;switch(pathCmd.command){case"L":p=this.getPointOnLine(delta,pathCmd.start.x,pathCmd.start.y,pathCmd.points[0],pathCmd.points[1],pathCmd.start.x,pathCmd.start.y);break;case"A":var start=pathCmd.points[4],dTheta=pathCmd.points[5],end=pathCmd.points[4]+dTheta;if(currentT=start+delta/pathCmd.pathLength*dTheta,dTheta<0&&currentT<end||dTheta>=0&&currentT>end)break;p=this.getPointOnEllipticalArc(pathCmd.points[0],pathCmd.points[1],pathCmd.points[2],pathCmd.points[3],currentT,pathCmd.points[6]);break;case"C":(currentT=delta/pathCmd.pathLength)>1&&(currentT=1),p=this.getPointOnCubicBezier(currentT,pathCmd.start.x,pathCmd.start.y,pathCmd.points[0],pathCmd.points[1],pathCmd.points[2],pathCmd.points[3],pathCmd.points[4],pathCmd.points[5]);break;case"Q":(currentT=delta/pathCmd.pathLength)>1&&(currentT=1),p=this.getPointOnQuadraticBezier(currentT,pathCmd.start.x,pathCmd.start.y,pathCmd.points[0],pathCmd.points[1],pathCmd.points[2],pathCmd.points[3])}if(p)return p;break}cumulativePathLength+=pathCmd.pathLength}}catch(err){_iterator.e(err)}finally{_iterator.f()}return null}},{key:"getLineLength",value:function getLineLength(x1,y1,x2,y2){return Math.sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1))}},{key:"getPathLength",value:function getPathLength(){return-1===this.pathLength&&(this.pathLength=this.dataArray.reduce((function(length,command){return command.pathLength>0?length+command.pathLength:length}),0)),this.pathLength}},{key:"getPointOnCubicBezier",value:function getPointOnCubicBezier(pct,P1x,P1y,P2x,P2y,P3x,P3y,P4x,P4y){return{x:P4x*CB1(pct)+P3x*CB2(pct)+P2x*CB3(pct)+P1x*CB4(pct),y:P4y*CB1(pct)+P3y*CB2(pct)+P2y*CB3(pct)+P1y*CB4(pct)}}},{key:"getPointOnQuadraticBezier",value:function getPointOnQuadraticBezier(pct,P1x,P1y,P2x,P2y,P3x,P3y){return{x:P3x*QB1(pct)+P2x*QB2(pct)+P1x*QB3(pct),y:P3y*QB1(pct)+P2y*QB2(pct)+P1y*QB3(pct)}}},{key:"getPointOnEllipticalArc",value:function getPointOnEllipticalArc(cx,cy,rx,ry,theta,psi){var cosPsi=Math.cos(psi),sinPsi=Math.sin(psi),pt_x=rx*Math.cos(theta),pt_y=ry*Math.sin(theta);return{x:cx+(pt_x*cosPsi-pt_y*sinPsi),y:cy+(pt_x*sinPsi+pt_y*cosPsi)}}},{key:"buildEquidistantCache",value:function buildEquidistantCache(inputStep,inputPrecision){var fullLen=this.getPathLength(),precision=inputPrecision||.25,step=inputStep||fullLen/100;if(!this.equidistantCache||this.equidistantCache.step!==step||this.equidistantCache.precision!==precision){this.equidistantCache={step:step,precision:precision,points:[]};for(var s=0,l=0;l<=fullLen;l+=precision){var p0=this.getPointOnPath(l),p1=this.getPointOnPath(l+precision);p0&&p1&&((s+=this.getLineLength(p0.x,p0.y,p1.x,p1.y))>=step&&(this.equidistantCache.points.push({x:p0.x,y:p0.y,distance:l}),s-=step))}}}},{key:"getEquidistantPointOnPath",value:function getEquidistantPointOnPath(targetDistance,step,precision){if(this.buildEquidistantCache(step,precision),targetDistance<0||targetDistance-this.getPathLength()>5e-5)return null;var idx=Math.round(targetDistance/this.getPathLength()*(this.equidistantCache.points.length-1));return this.equidistantCache.points[idx]||null}}]),TextPathElement}(TextElement);function _isNativeReflectConstruct$y(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var ImageElement=function(_RenderedElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(ImageElement,_RenderedElement);var _loadSvg,_loadImage,_super=function _createSuper$y(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$y()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(ImageElement);function ImageElement(document,node,captureTextNodes){var _this;_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,ImageElement),(_this=_super.call(this,document,node,captureTextNodes)).type="image",_this.loaded=!1;var href=_this.getHrefAttribute().getString();if(!href)return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(_this);var isSvg=/\.svg$/.test(href);return document.images.push(_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_46___default()(_this)),isSvg?_this.loadSvg(href):_this.loadImage(href),_this.isSvg=isSvg,_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(ImageElement,[{key:"loadImage",value:(_loadImage=_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_15___default()(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.mark((function _callee(href){var image;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:return _context.prev=0,_context.next=3,this.document.createImage(href);case 3:image=_context.sent,this.image=image,_context.next=10;break;case 7:_context.prev=7,_context.t0=_context.catch(0),console.error('Error while loading image "'.concat(href,'":'),_context.t0);case 10:this.loaded=!0;case 11:case"end":return _context.stop()}}),_callee,this,[[0,7]])}))),function loadImage(_x){return _loadImage.apply(this,arguments)})},{key:"loadSvg",value:(_loadSvg=_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_15___default()(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.mark((function _callee2(href){var response,svg;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:return _context2.prev=0,_context2.next=3,this.document.fetch(href);case 3:return response=_context2.sent,_context2.next=6,response.text();case 6:svg=_context2.sent,this.image=svg,_context2.next=13;break;case 10:_context2.prev=10,_context2.t0=_context2.catch(0),console.error('Error while loading image "'.concat(href,'":'),_context2.t0);case 13:this.loaded=!0;case 14:case"end":return _context2.stop()}}),_callee2,this,[[0,10]])}))),function loadSvg(_x2){return _loadSvg.apply(this,arguments)})},{key:"renderChildren",value:function renderChildren(ctx){var document=this.document,image=this.image,loaded=this.loaded,x=this.getAttribute("x").getPixels("x"),y=this.getAttribute("y").getPixels("y"),width=this.getStyle("width").getPixels("x"),height=this.getStyle("height").getPixels("y");if(loaded&&image&&width&&height){if(ctx.save(),this.isSvg)document.canvg.forkString(ctx,this.image,{ignoreMouse:!0,ignoreAnimation:!0,ignoreDimensions:!0,ignoreClear:!0,offsetX:x,offsetY:y,scaleWidth:width,scaleHeight:height}).render();else{var _image=this.image;ctx.translate(x,y),document.setViewBox({ctx:ctx,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:width,desiredWidth:_image.width,height:height,desiredHeight:_image.height}),this.loaded&&(void 0===_image.complete||_image.complete)&&ctx.drawImage(_image,0,0)}ctx.restore()}}},{key:"getBoundingBox",value:function getBoundingBox(){var x=this.getAttribute("x").getPixels("x"),y=this.getAttribute("y").getPixels("y"),width=this.getStyle("width").getPixels("x"),height=this.getStyle("height").getPixels("y");return new BoundingBox(x,y,x+width,y+height)}}]),ImageElement}(RenderedElement);function _isNativeReflectConstruct$z(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var SymbolElement=function(_RenderedElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(SymbolElement,_RenderedElement);var _super=function _createSuper$z(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$z()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(SymbolElement);function SymbolElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,SymbolElement),(_this=_super.apply(this,arguments)).type="symbol",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(SymbolElement,[{key:"render",value:function render(_){}}]),SymbolElement}(RenderedElement),SVGFontLoader=function(){function SVGFontLoader(document){_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,SVGFontLoader),this.document=document,this.loaded=!1,document.fonts.push(this)}var _load;return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(SVGFontLoader,[{key:"load",value:(_load=_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_15___default()(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.mark((function _callee(fontFamily,url){var document,svgDocument,fonts;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:return _context.prev=0,document=this.document,_context.next=4,document.canvg.parser.load(url);case 4:svgDocument=_context.sent,fonts=svgDocument.getElementsByTagName("font"),Array.from(fonts).forEach((function(fontNode){var font=document.createElement(fontNode);document.definitions[fontFamily]=font})),_context.next=12;break;case 9:_context.prev=9,_context.t0=_context.catch(0),console.error('Error while loading font "'.concat(url,'":'),_context.t0);case 12:this.loaded=!0;case 13:case"end":return _context.stop()}}),_callee,this,[[0,9]])}))),function load(_x,_x2){return _load.apply(this,arguments)})}]),SVGFontLoader}();function _isNativeReflectConstruct$A(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var StyleElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(StyleElement,_Element);var _super=function _createSuper$A(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$A()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(StyleElement);function StyleElement(document,node,captureTextNodes){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,StyleElement),(_this=_super.call(this,document,node,captureTextNodes)).type="style",compressSpaces(Array.from(node.childNodes).map((function(_){return _.data})).join("").replace(/(\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*+\/)|(^[\s]*\/\/.*)/gm,"").replace(/@import.*;/g,"")).split("}").forEach((function(_){var def=_.trim();if(def){var cssParts=def.split("{"),cssClasses=cssParts[0].split(","),cssProps=cssParts[1].split(";");cssClasses.forEach((function(_){var cssClass=_.trim();if(cssClass){var props=document.styles[cssClass]||{};if(cssProps.forEach((function(cssProp){var prop=cssProp.indexOf(":"),name=cssProp.substr(0,prop).trim(),value=cssProp.substr(prop+1,cssProp.length-prop).trim();name&&value&&(props[name]=new Property(document,name,value))})),document.styles[cssClass]=props,document.stylesSpecificity[cssClass]=getSelectorSpecificity(cssClass),"@font-face"===cssClass){var fontFamily=props["font-family"].getString().replace(/"|'/g,"");props.src.getString().split(",").forEach((function(src){if(src.indexOf('format("svg")')>0){var url=parseExternalUrl(src);url&&new SVGFontLoader(document).load(fontFamily,url)}}))}}}))}})),_this}return StyleElement}(Element);function _isNativeReflectConstruct$B(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}StyleElement.parseExternalUrl=parseExternalUrl;var UseElement=function(_RenderedElement){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(UseElement,_RenderedElement);var _super=function _createSuper$B(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$B()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(UseElement);function UseElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,UseElement),(_this=_super.apply(this,arguments)).type="use",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(UseElement,[{key:"setContext",value:function setContext(ctx){_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_42___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(UseElement.prototype),"setContext",this).call(this,ctx);var xAttr=this.getAttribute("x"),yAttr=this.getAttribute("y");xAttr.hasValue()&&ctx.translate(xAttr.getPixels("x"),0),yAttr.hasValue()&&ctx.translate(0,yAttr.getPixels("y"))}},{key:"path",value:function path(ctx){var element=this.element;element&&element.path(ctx)}},{key:"renderChildren",value:function renderChildren(ctx){var document=this.document,element=this.element;if(element){var tempSvg=element;if("symbol"===element.type&&((tempSvg=new SVGElement(document,null)).attributes.viewBox=new Property(document,"viewBox",element.getAttribute("viewBox").getString()),tempSvg.attributes.preserveAspectRatio=new Property(document,"preserveAspectRatio",element.getAttribute("preserveAspectRatio").getString()),tempSvg.attributes.overflow=new Property(document,"overflow",element.getAttribute("overflow").getString()),tempSvg.children=element.children),"svg"===tempSvg.type){var widthStyle=this.getStyle("width",!1,!0),heightStyle=this.getStyle("height",!1,!0);widthStyle.hasValue()&&(tempSvg.attributes.width=new Property(document,"width",widthStyle.getString())),heightStyle.hasValue()&&(tempSvg.attributes.height=new Property(document,"height",heightStyle.getString()))}var oldParent=tempSvg.parent;tempSvg.parent=this,tempSvg.render(ctx),tempSvg.parent=oldParent}}},{key:"getBoundingBox",value:function getBoundingBox(ctx){var element=this.element;return element?element.getBoundingBox(ctx):null}},{key:"elementTransform",value:function elementTransform(){var document=this.document,element=this.element;return Transform.fromElement(document,element)}},{key:"element",get:function get(){return this._element||(this._element=this.getHrefAttribute().getDefinition()),this._element}}]),UseElement}(RenderedElement);function _isNativeReflectConstruct$C(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function imGet(img,x,y,width,_,rgba){return img[y*width*4+4*x+rgba]}function imSet(img,x,y,width,_,rgba,val){img[y*width*4+4*x+rgba]=val}function m(matrix,i,v){var mi=matrix[i];return mi*(mi<0?v-255:v)}function c(a,m1,m2,m3){return m1+Math.cos(a)*m2+Math.sin(a)*m3}var FeColorMatrixElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(FeColorMatrixElement,_Element);var _super=function _createSuper$C(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$C()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(FeColorMatrixElement);function FeColorMatrixElement(document,node,captureTextNodes){var _this;_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,FeColorMatrixElement),(_this=_super.call(this,document,node,captureTextNodes)).type="feColorMatrix";var matrix=toNumbers(_this.getAttribute("values").getString());switch(_this.getAttribute("type").getString("matrix")){case"saturate":var s=matrix[0];matrix=[.213+.787*s,.715-.715*s,.072-.072*s,0,0,.213-.213*s,.715+.285*s,.072-.072*s,0,0,.213-.213*s,.715-.715*s,.072+.928*s,0,0,0,0,0,1,0,0,0,0,0,1];break;case"hueRotate":var a=matrix[0]*Math.PI/180;matrix=[c(a,.213,.787,-.213),c(a,.715,-.715,-.715),c(a,.072,-.072,.928),0,0,c(a,.213,-.213,.143),c(a,.715,.285,.14),c(a,.072,-.072,-.283),0,0,c(a,.213,-.213,-.787),c(a,.715,-.715,.715),c(a,.072,.928,.072),0,0,0,0,0,1,0,0,0,0,0,1];break;case"luminanceToAlpha":matrix=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,.2125,.7154,.0721,0,0,0,0,0,0,1]}return _this.matrix=matrix,_this.includeOpacity=_this.getAttribute("includeOpacity").hasValue(),_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(FeColorMatrixElement,[{key:"apply",value:function apply(ctx,_,__,width,height){for(var includeOpacity=this.includeOpacity,matrix=this.matrix,srcData=ctx.getImageData(0,0,width,height),y=0;y<height;y++)for(var x=0;x<width;x++){var r=imGet(srcData.data,x,y,width,0,0),g=imGet(srcData.data,x,y,width,0,1),b=imGet(srcData.data,x,y,width,0,2),a=imGet(srcData.data,x,y,width,0,3),nr=m(matrix,0,r)+m(matrix,1,g)+m(matrix,2,b)+m(matrix,3,a)+m(matrix,4,1),ng=m(matrix,5,r)+m(matrix,6,g)+m(matrix,7,b)+m(matrix,8,a)+m(matrix,9,1),nb=m(matrix,10,r)+m(matrix,11,g)+m(matrix,12,b)+m(matrix,13,a)+m(matrix,14,1),na=m(matrix,15,r)+m(matrix,16,g)+m(matrix,17,b)+m(matrix,18,a)+m(matrix,19,1);includeOpacity&&(nr=ng=nb=0,na*=a/255),imSet(srcData.data,x,y,width,0,0,nr),imSet(srcData.data,x,y,width,0,1,ng),imSet(srcData.data,x,y,width,0,2,nb),imSet(srcData.data,x,y,width,0,3,na)}ctx.clearRect(0,0,width,height),ctx.putImageData(srcData,0,0)}}]),FeColorMatrixElement}(Element);function _isNativeReflectConstruct$D(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var MaskElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(MaskElement,_Element);var _super=function _createSuper$D(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$D()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(MaskElement);function MaskElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,MaskElement),(_this=_super.apply(this,arguments)).type="mask",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(MaskElement,[{key:"apply",value:function apply(ctx,element){var document=this.document,x=this.getAttribute("x").getPixels("x"),y=this.getAttribute("y").getPixels("y"),width=this.getStyle("width").getPixels("x"),height=this.getStyle("height").getPixels("y");if(!width&&!height){var boundingBox=new BoundingBox;this.children.forEach((function(child){boundingBox.addBoundingBox(child.getBoundingBox(ctx))})),x=Math.floor(boundingBox.x1),y=Math.floor(boundingBox.y1),width=Math.floor(boundingBox.width),height=Math.floor(boundingBox.height)}var ignoredStyles=this.removeStyles(element,MaskElement.ignoreStyles),maskCanvas=document.createCanvas(x+width,y+height),maskCtx=maskCanvas.getContext("2d");document.screen.setDefaults(maskCtx),this.renderChildren(maskCtx),new FeColorMatrixElement(document,{nodeType:1,childNodes:[],attributes:[{nodeName:"type",value:"luminanceToAlpha"},{nodeName:"includeOpacity",value:"true"}]}).apply(maskCtx,0,0,x+width,y+height);var tmpCanvas=document.createCanvas(x+width,y+height),tmpCtx=tmpCanvas.getContext("2d");document.screen.setDefaults(tmpCtx),element.render(tmpCtx),tmpCtx.globalCompositeOperation="destination-in",tmpCtx.fillStyle=maskCtx.createPattern(maskCanvas,"no-repeat"),tmpCtx.fillRect(0,0,x+width,y+height),ctx.fillStyle=tmpCtx.createPattern(tmpCanvas,"no-repeat"),ctx.fillRect(0,0,x+width,y+height),this.restoreStyles(element,ignoredStyles)}},{key:"render",value:function render(_){}}]),MaskElement}(Element);function _isNativeReflectConstruct$E(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}MaskElement.ignoreStyles=["mask","transform","clip-path"];var noop=function noop(){},ClipPathElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(ClipPathElement,_Element);var _super=function _createSuper$E(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$E()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(ClipPathElement);function ClipPathElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,ClipPathElement),(_this=_super.apply(this,arguments)).type="clipPath",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(ClipPathElement,[{key:"apply",value:function apply(ctx){var document=this.document,contextProto=Reflect.getPrototypeOf(ctx),beginPath=ctx.beginPath,closePath=ctx.closePath;contextProto&&(contextProto.beginPath=noop,contextProto.closePath=noop),Reflect.apply(beginPath,ctx,[]),this.children.forEach((function(child){if(void 0!==child.path){var transform=void 0!==child.elementTransform?child.elementTransform():null;transform||(transform=Transform.fromElement(document,child)),transform&&transform.apply(ctx),child.path(ctx),contextProto&&(contextProto.closePath=closePath),transform&&transform.unapply(ctx)}})),Reflect.apply(closePath,ctx,[]),ctx.clip(),contextProto&&(contextProto.beginPath=beginPath,contextProto.closePath=closePath)}},{key:"render",value:function render(_){}}]),ClipPathElement}(Element);function _isNativeReflectConstruct$F(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var FilterElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(FilterElement,_Element);var _super=function _createSuper$F(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$F()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(FilterElement);function FilterElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,FilterElement),(_this=_super.apply(this,arguments)).type="filter",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(FilterElement,[{key:"apply",value:function apply(ctx,element){var document=this.document,children=this.children,boundingBox=element.getBoundingBox(ctx);if(boundingBox){var px=0,py=0;children.forEach((function(child){var efd=child.extraFilterDistance||0;px=Math.max(px,efd),py=Math.max(py,efd)}));var width=Math.floor(boundingBox.width),height=Math.floor(boundingBox.height),tmpCanvasWidth=width+2*px,tmpCanvasHeight=height+2*py;if(!(tmpCanvasWidth<1||tmpCanvasHeight<1)){var x=Math.floor(boundingBox.x),y=Math.floor(boundingBox.y),ignoredStyles=this.removeStyles(element,FilterElement.ignoreStyles),tmpCanvas=document.createCanvas(tmpCanvasWidth,tmpCanvasHeight),tmpCtx=tmpCanvas.getContext("2d");document.screen.setDefaults(tmpCtx),tmpCtx.translate(-x+px,-y+py),element.render(tmpCtx),children.forEach((function(child){"function"==typeof child.apply&&child.apply(tmpCtx,0,0,tmpCanvasWidth,tmpCanvasHeight)})),ctx.drawImage(tmpCanvas,0,0,tmpCanvasWidth,tmpCanvasHeight,x-px,y-py,tmpCanvasWidth,tmpCanvasHeight),this.restoreStyles(element,ignoredStyles)}}}},{key:"render",value:function render(_){}}]),FilterElement}(Element);function _isNativeReflectConstruct$G(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}FilterElement.ignoreStyles=["filter","transform","clip-path"];var FeDropShadowElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(FeDropShadowElement,_Element);var _super=function _createSuper$G(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$G()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(FeDropShadowElement);function FeDropShadowElement(document,node,captureTextNodes){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,FeDropShadowElement),(_this=_super.call(this,document,node,captureTextNodes)).type="feDropShadow",_this.addStylesFromStyleDefinition(),_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(FeDropShadowElement,[{key:"apply",value:function apply(_,__,___,____,_____){}}]),FeDropShadowElement}(Element);function _isNativeReflectConstruct$H(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var FeMorphologyElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(FeMorphologyElement,_Element);var _super=function _createSuper$H(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$H()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(FeMorphologyElement);function FeMorphologyElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,FeMorphologyElement),(_this=_super.apply(this,arguments)).type="feMorphology",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(FeMorphologyElement,[{key:"apply",value:function apply(_,__,___,____,_____){}}]),FeMorphologyElement}(Element);function _isNativeReflectConstruct$I(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var FeCompositeElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(FeCompositeElement,_Element);var _super=function _createSuper$I(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$I()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(FeCompositeElement);function FeCompositeElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,FeCompositeElement),(_this=_super.apply(this,arguments)).type="feComposite",_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(FeCompositeElement,[{key:"apply",value:function apply(_,__,___,____,_____){}}]),FeCompositeElement}(Element);function _isNativeReflectConstruct$J(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var FeGaussianBlurElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(FeGaussianBlurElement,_Element);var _super=function _createSuper$J(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$J()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(FeGaussianBlurElement);function FeGaussianBlurElement(document,node,captureTextNodes){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,FeGaussianBlurElement),(_this=_super.call(this,document,node,captureTextNodes)).type="feGaussianBlur",_this.blurRadius=Math.floor(_this.getAttribute("stdDeviation").getNumber()),_this.extraFilterDistance=_this.blurRadius,_this}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(FeGaussianBlurElement,[{key:"apply",value:function apply(ctx,x,y,width,height){var document=this.document,blurRadius=this.blurRadius,body=document.window?document.window.document.body:null,canvas=ctx.canvas;canvas.id=document.getUniqueId(),body&&(canvas.style.display="none",body.appendChild(canvas)),Object(stackblur_canvas__WEBPACK_IMPORTED_MODULE_55__.a)(canvas,x,y,width,height,blurRadius),body&&body.removeChild(canvas)}}]),FeGaussianBlurElement}(Element);function _isNativeReflectConstruct$K(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var TitleElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(TitleElement,_Element);var _super=function _createSuper$K(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$K()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(TitleElement);function TitleElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,TitleElement),(_this=_super.apply(this,arguments)).type="title",_this}return TitleElement}(Element);function _isNativeReflectConstruct$L(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}var DescElement=function(_Element){_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_32___default()(DescElement,_Element);var _super=function _createSuper$L(Derived){return function(){var result,Super=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(Derived);if(_isNativeReflectConstruct$L()){var NewTarget=_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_31___default()(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else result=Super.apply(this,arguments);return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_30___default()(this,result)}}(DescElement);function DescElement(){var _this;return _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,DescElement),(_this=_super.apply(this,arguments)).type="desc",_this}return DescElement}(Element),elementTypes={svg:SVGElement,rect:RectElement,circle:CircleElement,ellipse:EllipseElement,line:LineElement,polyline:PolylineElement,polygon:PolygonElement,path:PathElement,pattern:PatternElement,marker:MarkerElement,defs:DefsElement,linearGradient:LinearGradientElement,radialGradient:RadialGradientElement,stop:StopElement,animate:AnimateElement,animateColor:AnimateColorElement,animateTransform:AnimateTransformElement,font:FontElement,"font-face":FontFaceElement,"missing-glyph":MissingGlyphElement,glyph:GlyphElement,text:TextElement,tspan:TSpanElement,tref:TRefElement,a:AElement,textPath:TextPathElement,image:ImageElement,g:GElement,symbol:SymbolElement,style:StyleElement,use:UseElement,mask:MaskElement,clipPath:ClipPathElement,filter:FilterElement,feDropShadow:FeDropShadowElement,feMorphology:FeMorphologyElement,feComposite:FeCompositeElement,feColorMatrix:FeColorMatrixElement,feGaussianBlur:FeGaussianBlurElement,title:TitleElement,desc:DescElement};function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _createImage(){return(_createImage=_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_15___default()(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.mark((function _callee(src){var anonymousCrossOrigin,image,_args=arguments;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:return anonymousCrossOrigin=_args.length>1&&void 0!==_args[1]&&_args[1],image=document.createElement("img"),anonymousCrossOrigin&&(image.crossOrigin="Anonymous"),_context.abrupt("return",new Promise((function(resolve,reject){image.onload=function(){resolve(image)},image.onerror=function(){reject()},image.src=src})));case 4:case"end":return _context.stop()}}),_callee)})))).apply(this,arguments)}var Document=function(){function Document(canvg){var _ref=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_ref$rootEmSize=_ref.rootEmSize,rootEmSize=void 0===_ref$rootEmSize?12:_ref$rootEmSize,_ref$emSize=_ref.emSize,emSize=void 0===_ref$emSize?12:_ref$emSize,_ref$createCanvas=_ref.createCanvas,createCanvas=void 0===_ref$createCanvas?Document.createCanvas:_ref$createCanvas,_ref$createImage=_ref.createImage,createImage=void 0===_ref$createImage?Document.createImage:_ref$createImage,anonymousCrossOrigin=_ref.anonymousCrossOrigin;_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,Document),this.canvg=canvg,this.definitions={},this.styles={},this.stylesSpecificity={},this.images=[],this.fonts=[],this.emSizeStack=[],this.uniqueId=0,this.screen=canvg.screen,this.rootEmSize=rootEmSize,this.emSize=emSize,this.createCanvas=createCanvas,this.createImage=this.bindCreateImage(createImage,anonymousCrossOrigin),this.screen.wait(this.isImagesLoaded.bind(this)),this.screen.wait(this.isFontsLoaded.bind(this))}return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(Document,[{key:"bindCreateImage",value:function bindCreateImage(createImage,anonymousCrossOrigin){return"boolean"==typeof anonymousCrossOrigin?function(source,forceAnonymousCrossOrigin){return createImage(source,"boolean"==typeof forceAnonymousCrossOrigin?forceAnonymousCrossOrigin:anonymousCrossOrigin)}:createImage}},{key:"popEmSize",value:function popEmSize(){this.emSizeStack.pop()}},{key:"getUniqueId",value:function getUniqueId(){return"canvg".concat(++this.uniqueId)}},{key:"isImagesLoaded",value:function isImagesLoaded(){return this.images.every((function(_){return _.loaded}))}},{key:"isFontsLoaded",value:function isFontsLoaded(){return this.fonts.every((function(_){return _.loaded}))}},{key:"createDocumentElement",value:function createDocumentElement(document){var documentElement=this.createElement(document.documentElement);return documentElement.root=!0,documentElement.addStylesFromStyleDefinition(),this.documentElement=documentElement,documentElement}},{key:"createElement",value:function createElement(node){var elementType=node.nodeName.replace(/^[^:]+:/,""),ElementType=Document.elementTypes[elementType];return void 0!==ElementType?new ElementType(this,node):new UnknownElement(this,node)}},{key:"createTextNode",value:function createTextNode(node){return new TextNode(this,node)}},{key:"setViewBox",value:function setViewBox(config){this.screen.setViewBox(function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_16___default()(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}({document:this},config))}},{key:"window",get:function get(){return this.screen.window}},{key:"fetch",get:function get(){return this.screen.fetch}},{key:"ctx",get:function get(){return this.screen.ctx}},{key:"emSize",get:function get(){var emSizeStack=this.emSizeStack;return emSizeStack[emSizeStack.length-1]},set:function set(value){this.emSizeStack.push(value)}}]),Document}();function ownKeys$1(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread$1(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys$1(Object(source),!0).forEach((function(key){_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_16___default()(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys$1(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}Document.createCanvas=function createCanvas(width,height){var canvas=document.createElement("canvas");return canvas.width=width,canvas.height=height,canvas},Document.createImage=function createImage(_x){return _createImage.apply(this,arguments)},Document.elementTypes=elementTypes;var Canvg=function(){function Canvg(ctx,svg){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_17___default()(this,Canvg),this.parser=new Parser(options),this.screen=new Screen(ctx,options),this.options=options;var document=new Document(this,options),documentElement=document.createDocumentElement(svg);this.document=document,this.documentElement=documentElement}var _from,_render;return _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_18___default()(Canvg,[{key:"fork",value:function fork(ctx,svg){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return Canvg.from(ctx,svg,_objectSpread$1({},this.options,{},options))}},{key:"forkString",value:function forkString(ctx,svg){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return Canvg.fromString(ctx,svg,_objectSpread$1({},this.options,{},options))}},{key:"ready",value:function ready(){return this.screen.ready()}},{key:"isReady",value:function isReady(){return this.screen.isReady()}},{key:"render",value:(_render=_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_15___default()(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.mark((function _callee(){var options,_args=arguments;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:return options=_args.length>0&&void 0!==_args[0]?_args[0]:{},this.start(_objectSpread$1({enableRedraw:!0,ignoreAnimation:!0,ignoreMouse:!0},options)),_context.next=4,this.ready();case 4:this.stop();case 5:case"end":return _context.stop()}}),_callee,this)}))),function render(){return _render.apply(this,arguments)})},{key:"start",value:function start(){var options=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},documentElement=this.documentElement,screen=this.screen,baseOptions=this.options;screen.start(documentElement,_objectSpread$1({enableRedraw:!0},baseOptions,{},options))}},{key:"stop",value:function stop(){this.screen.stop()}},{key:"resize",value:function resize(width){var height=arguments.length>1&&void 0!==arguments[1]?arguments[1]:width,preserveAspectRatio=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.documentElement.resize(width,height,preserveAspectRatio)}}],[{key:"from",value:(_from=_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_15___default()(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.mark((function _callee2(ctx,svg){var options,parser,svgDocument,_args2=arguments;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:return options=_args2.length>2&&void 0!==_args2[2]?_args2[2]:{},parser=new Parser(options),_context2.next=4,parser.parse(svg);case 4:return svgDocument=_context2.sent,_context2.abrupt("return",new Canvg(ctx,svgDocument,options));case 6:case"end":return _context2.stop()}}),_callee2)}))),function from(_x,_x2){return _from.apply(this,arguments)})},{key:"fromString",value:function fromString(ctx,svg){var options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},parser=new Parser(options),svgDocument=parser.parseFromString(svg);return new Canvg(ctx,svgDocument,options)}}]),Canvg}();var index=Object.freeze({__proto__:null,offscreen:function offscreen(){var _ref=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},DOMParserFallback=_ref.DOMParser,preset={window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:DOMParserFallback,createCanvas:function createCanvas(width,height){return new OffscreenCanvas(width,height)},createImage:function createImage(url){return _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_15___default()(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.mark((function _callee(){var response,blob,img;return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_14___default.a.wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:return _context.next=2,fetch(url);case 2:return response=_context.sent,_context.next=5,response.blob();case 5:return blob=_context.sent,_context.next=8,createImageBitmap(blob);case 8:return img=_context.sent,_context.abrupt("return",img);case 10:case"end":return _context.stop()}}),_callee)})))()}};return"undefined"==typeof DOMParser&&void 0!==DOMParserFallback||Reflect.deleteProperty(preset,"DOMParser"),preset},node:function node(_ref){var DOMParser=_ref.DOMParser,canvas=_ref.canvas;return{window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:DOMParser,fetch:_ref.fetch,createCanvas:canvas.createCanvas,createImage:canvas.loadImage}}});__webpack_exports__.default=Canvg}.call(this,__webpack_require__("f28c"))},"11b0":function(module,exports,__webpack_require__){__webpack_require__("a4d3"),__webpack_require__("e01a"),__webpack_require__("d28b"),__webpack_require__("a630"),__webpack_require__("e260"),__webpack_require__("d3b7"),__webpack_require__("3ca3"),__webpack_require__("ddb0"),module.exports=function _iterableToArray(iter){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(iter))return Array.from(iter)}},2236:function(module,exports,__webpack_require__){var arrayLikeToArray=__webpack_require__("5a43");module.exports=function _arrayWithoutHoles(arr){if(Array.isArray(arr))return arrayLikeToArray(arr)}},"26e9":function(module,exports,__webpack_require__){"use strict";var $=__webpack_require__("23e7"),isArray=__webpack_require__("e8b5"),nativeReverse=[].reverse,test=[1,2];$({target:"Array",proto:!0,forced:String(test)===String(test.reverse())},{reverse:function reverse(){return isArray(this)&&(this.length=this.length),nativeReverse.call(this)}})},"278c":function(module,exports,__webpack_require__){var arrayWithHoles=__webpack_require__("c135"),iterableToArrayLimit=__webpack_require__("9b42"),unsupportedIterableToArray=__webpack_require__("6613"),nonIterableRest=__webpack_require__("c240");module.exports=function _slicedToArray(arr,i){return arrayWithHoles(arr)||iterableToArrayLimit(arr,i)||unsupportedIterableToArray(arr,i)||nonIterableRest()}},"448a":function(module,exports,__webpack_require__){var arrayWithoutHoles=__webpack_require__("2236"),iterableToArray=__webpack_require__("11b0"),unsupportedIterableToArray=__webpack_require__("6613"),nonIterableSpread=__webpack_require__("0676");module.exports=function _toConsumableArray(arr){return arrayWithoutHoles(arr)||iterableToArray(arr)||unsupportedIterableToArray(arr)||nonIterableSpread()}},"58e1":function(module,exports){module.exports=function(color_string){this.ok=!1,this.alpha=1,"#"==color_string.charAt(0)&&(color_string=color_string.substr(1,6)),color_string=(color_string=color_string.replace(/ /g,"")).toLowerCase();var simple_colors={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dodgerblue:"1e90ff",feldspar:"d19275",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgrey:"d3d3d3",lightgreen:"90ee90",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslateblue:"8470ff",lightslategray:"778899",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"00ff00",limegreen:"32cd32",linen:"faf0e6",magenta:"ff00ff",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370d8",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"d87093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"ff0000",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",violetred:"d02090",wheat:"f5deb3",white:"ffffff",whitesmoke:"f5f5f5",yellow:"ffff00",yellowgreen:"9acd32"};color_string=simple_colors[color_string]||color_string;for(var color_defs=[{re:/^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*((?:\d?\.)?\d)\)$/,example:["rgba(123, 234, 45, 0.8)","rgba(255,234,245,1.0)"],process:function(bits){return[parseInt(bits[1]),parseInt(bits[2]),parseInt(bits[3]),parseFloat(bits[4])]}},{re:/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,example:["rgb(123, 234, 45)","rgb(255,234,245)"],process:function(bits){return[parseInt(bits[1]),parseInt(bits[2]),parseInt(bits[3])]}},{re:/^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,example:["#00ff00","336699"],process:function(bits){return[parseInt(bits[1],16),parseInt(bits[2],16),parseInt(bits[3],16)]}},{re:/^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,example:["#fb0","f0f"],process:function(bits){return[parseInt(bits[1]+bits[1],16),parseInt(bits[2]+bits[2],16),parseInt(bits[3]+bits[3],16)]}}],i=0;i<color_defs.length;i++){var re=color_defs[i].re,processor=color_defs[i].process,bits=re.exec(color_string);if(bits){var channels=processor(bits);this.r=channels[0],this.g=channels[1],this.b=channels[2],channels.length>3&&(this.alpha=channels[3]),this.ok=!0}}this.r=this.r<0||isNaN(this.r)?0:this.r>255?255:this.r,this.g=this.g<0||isNaN(this.g)?0:this.g>255?255:this.g,this.b=this.b<0||isNaN(this.b)?0:this.b>255?255:this.b,this.alpha=this.alpha<0?0:this.alpha>1||isNaN(this.alpha)?1:this.alpha,this.toRGB=function(){return"rgb("+this.r+", "+this.g+", "+this.b+")"},this.toRGBA=function(){return"rgba("+this.r+", "+this.g+", "+this.b+", "+this.alpha+")"},this.toHex=function(){var r=this.r.toString(16),g=this.g.toString(16),b=this.b.toString(16);return 1==r.length&&(r="0"+r),1==g.length&&(g="0"+g),1==b.length&&(b="0"+b),"#"+r+g+b},this.getHelpXML=function(){for(var examples=new Array,i=0;i<color_defs.length;i++)for(var example=color_defs[i].example,j=0;j<example.length;j++)examples[examples.length]=example[j];for(var sc in simple_colors)examples[examples.length]=sc;var xml=document.createElement("ul");xml.setAttribute("id","rgbcolor-examples");for(i=0;i<examples.length;i++)try{var list_item=document.createElement("li"),list_color=new RGBColor(examples[i]),example_div=document.createElement("div");example_div.style.cssText="margin: 3px; border: 1px solid black; background:"+list_color.toHex()+"; color:"+list_color.toHex(),example_div.appendChild(document.createTextNode("test"));var list_item_value=document.createTextNode(" "+examples[i]+" -> "+list_color.toRGB()+" -> "+list_color.toHex());list_item.appendChild(example_div),list_item.appendChild(list_item_value),xml.appendChild(list_item)}catch(e){}return xml}}},"5a43":function(module,exports){module.exports=function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}},"5e9e":function(module,__webpack_exports__,__webpack_require__){"use strict";function _typeof(obj){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj})(obj)}__webpack_require__.d(__webpack_exports__,"a",(function(){return processCanvasRGBA}));var mulTable=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],shgTable=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];function getImageDataFromCanvas(canvas,topX,topY,width,height){if("string"==typeof canvas&&(canvas=document.getElementById(canvas)),!canvas||"object"!==_typeof(canvas)||!("getContext"in canvas))throw new TypeError("Expecting canvas with `getContext` method in processCanvasRGB(A) calls!");var context=canvas.getContext("2d");try{return context.getImageData(topX,topY,width,height)}catch(e){throw new Error("unable to access image data: "+e)}}function processCanvasRGBA(canvas,topX,topY,width,height,radius){if(!(isNaN(radius)||radius<1)){radius|=0;var imageData=getImageDataFromCanvas(canvas,topX,topY,width,height);imageData=function processImageDataRGBA(imageData,topX,topY,width,height,radius){var x,y,i,p,yp,yi,yw,rSum,gSum,bSum,aSum,rOutSum,gOutSum,bOutSum,aOutSum,rInSum,gInSum,bInSum,aInSum,pr,pg,pb,pa,rbs,stackEnd,pixels=imageData.data,div=2*radius+1,widthMinus1=width-1,heightMinus1=height-1,radiusPlus1=radius+1,sumFactor=radiusPlus1*(radiusPlus1+1)/2,stackStart=new BlurStack,stack=stackStart;for(i=1;i<div;i++)stack=stack.next=new BlurStack,i===radiusPlus1&&(stackEnd=stack);stack.next=stackStart;var stackIn=null,stackOut=null;yw=yi=0;var mulSum=mulTable[radius],shgSum=shgTable[radius];for(y=0;y<height;y++){for(rInSum=gInSum=bInSum=aInSum=rSum=gSum=bSum=aSum=0,rOutSum=radiusPlus1*(pr=pixels[yi]),gOutSum=radiusPlus1*(pg=pixels[yi+1]),bOutSum=radiusPlus1*(pb=pixels[yi+2]),aOutSum=radiusPlus1*(pa=pixels[yi+3]),rSum+=sumFactor*pr,gSum+=sumFactor*pg,bSum+=sumFactor*pb,aSum+=sumFactor*pa,stack=stackStart,i=0;i<radiusPlus1;i++)stack.r=pr,stack.g=pg,stack.b=pb,stack.a=pa,stack=stack.next;for(i=1;i<radiusPlus1;i++)p=yi+((widthMinus1<i?widthMinus1:i)<<2),rSum+=(stack.r=pr=pixels[p])*(rbs=radiusPlus1-i),gSum+=(stack.g=pg=pixels[p+1])*rbs,bSum+=(stack.b=pb=pixels[p+2])*rbs,aSum+=(stack.a=pa=pixels[p+3])*rbs,rInSum+=pr,gInSum+=pg,bInSum+=pb,aInSum+=pa,stack=stack.next;for(stackIn=stackStart,stackOut=stackEnd,x=0;x<width;x++)pixels[yi+3]=pa=aSum*mulSum>>shgSum,0!==pa?(pa=255/pa,pixels[yi]=(rSum*mulSum>>shgSum)*pa,pixels[yi+1]=(gSum*mulSum>>shgSum)*pa,pixels[yi+2]=(bSum*mulSum>>shgSum)*pa):pixels[yi]=pixels[yi+1]=pixels[yi+2]=0,rSum-=rOutSum,gSum-=gOutSum,bSum-=bOutSum,aSum-=aOutSum,rOutSum-=stackIn.r,gOutSum-=stackIn.g,bOutSum-=stackIn.b,aOutSum-=stackIn.a,p=yw+((p=x+radius+1)<widthMinus1?p:widthMinus1)<<2,rInSum+=stackIn.r=pixels[p],gInSum+=stackIn.g=pixels[p+1],bInSum+=stackIn.b=pixels[p+2],aInSum+=stackIn.a=pixels[p+3],rSum+=rInSum,gSum+=gInSum,bSum+=bInSum,aSum+=aInSum,stackIn=stackIn.next,rOutSum+=pr=stackOut.r,gOutSum+=pg=stackOut.g,bOutSum+=pb=stackOut.b,aOutSum+=pa=stackOut.a,rInSum-=pr,gInSum-=pg,bInSum-=pb,aInSum-=pa,stackOut=stackOut.next,yi+=4;yw+=width}for(x=0;x<width;x++){for(gInSum=bInSum=aInSum=rInSum=gSum=bSum=aSum=rSum=0,rOutSum=radiusPlus1*(pr=pixels[yi=x<<2]),gOutSum=radiusPlus1*(pg=pixels[yi+1]),bOutSum=radiusPlus1*(pb=pixels[yi+2]),aOutSum=radiusPlus1*(pa=pixels[yi+3]),rSum+=sumFactor*pr,gSum+=sumFactor*pg,bSum+=sumFactor*pb,aSum+=sumFactor*pa,stack=stackStart,i=0;i<radiusPlus1;i++)stack.r=pr,stack.g=pg,stack.b=pb,stack.a=pa,stack=stack.next;for(yp=width,i=1;i<=radius;i++)yi=yp+x<<2,rSum+=(stack.r=pr=pixels[yi])*(rbs=radiusPlus1-i),gSum+=(stack.g=pg=pixels[yi+1])*rbs,bSum+=(stack.b=pb=pixels[yi+2])*rbs,aSum+=(stack.a=pa=pixels[yi+3])*rbs,rInSum+=pr,gInSum+=pg,bInSum+=pb,aInSum+=pa,stack=stack.next,i<heightMinus1&&(yp+=width);for(yi=x,stackIn=stackStart,stackOut=stackEnd,y=0;y<height;y++)pixels[(p=yi<<2)+3]=pa=aSum*mulSum>>shgSum,pa>0?(pa=255/pa,pixels[p]=(rSum*mulSum>>shgSum)*pa,pixels[p+1]=(gSum*mulSum>>shgSum)*pa,pixels[p+2]=(bSum*mulSum>>shgSum)*pa):pixels[p]=pixels[p+1]=pixels[p+2]=0,rSum-=rOutSum,gSum-=gOutSum,bSum-=bOutSum,aSum-=aOutSum,rOutSum-=stackIn.r,gOutSum-=stackIn.g,bOutSum-=stackIn.b,aOutSum-=stackIn.a,p=x+((p=y+radiusPlus1)<heightMinus1?p:heightMinus1)*width<<2,rSum+=rInSum+=stackIn.r=pixels[p],gSum+=gInSum+=stackIn.g=pixels[p+1],bSum+=bInSum+=stackIn.b=pixels[p+2],aSum+=aInSum+=stackIn.a=pixels[p+3],stackIn=stackIn.next,rOutSum+=pr=stackOut.r,gOutSum+=pg=stackOut.g,bOutSum+=pb=stackOut.b,aOutSum+=pa=stackOut.a,rInSum-=pr,gInSum-=pg,bInSum-=pb,aInSum-=pa,stackOut=stackOut.next,yi+=width}return imageData}(imageData,0,0,width,height,radius),canvas.getContext("2d").putImageData(imageData,topX,topY)}}var BlurStack=function BlurStack(){!function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}(this,BlurStack),this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}},6613:function(module,exports,__webpack_require__){__webpack_require__("a630"),__webpack_require__("fb6a"),__webpack_require__("b0c0"),__webpack_require__("d3b7"),__webpack_require__("25f0"),__webpack_require__("3ca3");var arrayLikeToArray=__webpack_require__("5a43");module.exports=function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?arrayLikeToArray(o,minLen):void 0}}},"6d08":function(module,exports,__webpack_require__){(function(process){(function(){var getNanoSeconds,hrtime,loadTime,moduleLoadTime,nodeLoadTime,upTime;"undefined"!=typeof performance&&null!==performance&&performance.now?module.exports=function(){return performance.now()}:null!=process&&process.hrtime?(module.exports=function(){return(getNanoSeconds()-nodeLoadTime)/1e6},hrtime=process.hrtime,moduleLoadTime=(getNanoSeconds=function(){var hr;return 1e9*(hr=hrtime())[0]+hr[1]})(),upTime=1e9*process.uptime(),nodeLoadTime=moduleLoadTime-upTime):Date.now?(module.exports=function(){return Date.now()-loadTime},loadTime=Date.now()):(module.exports=function(){return(new Date).getTime()-loadTime},loadTime=(new Date).getTime())}).call(this)}).call(this,__webpack_require__("f28c"))},"7f78":function(module,exports,__webpack_require__){var $=__webpack_require__("23e7"),anObject=__webpack_require__("825a"),objectGetPrototypeOf=__webpack_require__("e163");$({target:"Reflect",stat:!0,sham:!__webpack_require__("e177")},{getPrototypeOf:function getPrototypeOf(target){return objectGetPrototypeOf(anObject(target))}})},"9b42":function(module,exports,__webpack_require__){__webpack_require__("a4d3"),__webpack_require__("e01a"),__webpack_require__("d28b"),__webpack_require__("e260"),__webpack_require__("d3b7"),__webpack_require__("3ca3"),__webpack_require__("ddb0"),module.exports=function _iterableToArrayLimit(arr,i){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(arr)){var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}}},a6fd:function(module,exports,__webpack_require__){var $=__webpack_require__("23e7"),getBuiltIn=__webpack_require__("d066"),aFunction=__webpack_require__("1c0b"),anObject=__webpack_require__("825a"),fails=__webpack_require__("d039"),nativeApply=getBuiltIn("Reflect","apply"),functionApply=Function.apply;$({target:"Reflect",stat:!0,forced:!fails((function(){nativeApply((function(){}))}))},{apply:function apply(target,thisArgument,argumentsList){return aFunction(target),anObject(argumentsList),nativeApply?nativeApply(target,thisArgument,argumentsList):functionApply.call(target,thisArgument,argumentsList)}})},ac16:function(module,exports,__webpack_require__){var $=__webpack_require__("23e7"),anObject=__webpack_require__("825a"),getOwnPropertyDescriptor=__webpack_require__("06cf").f;$({target:"Reflect",stat:!0},{deleteProperty:function deleteProperty(target,propertyKey){var descriptor=getOwnPropertyDescriptor(anObject(target),propertyKey);return!(descriptor&&!descriptor.configurable)&&delete target[propertyKey]}})},c135:function(module,exports){module.exports=function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}},c240:function(module,exports){module.exports=function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}},c449:function(module,exports,__webpack_require__){(function(global){for(var now=__webpack_require__("6d08"),root="undefined"==typeof window?global:window,vendors=["moz","webkit"],suffix="AnimationFrame",raf=root["request"+suffix],caf=root["cancel"+suffix]||root["cancelRequest"+suffix],i=0;!raf&&i<vendors.length;i++)raf=root[vendors[i]+"Request"+suffix],caf=root[vendors[i]+"Cancel"+suffix]||root[vendors[i]+"CancelRequest"+suffix];if(!raf||!caf){var last=0,id=0,queue=[];raf=function(callback){if(0===queue.length){var _now=now(),next=Math.max(0,1e3/60-(_now-last));last=next+_now,setTimeout((function(){var cp=queue.slice(0);queue.length=0;for(var i=0;i<cp.length;i++)if(!cp[i].cancelled)try{cp[i].callback(last)}catch(e){setTimeout((function(){throw e}),0)}}),Math.round(next))}return queue.push({handle:++id,callback:callback,cancelled:!1}),id},caf=function(handle){for(var i=0;i<queue.length;i++)queue[i].handle===handle&&(queue[i].cancelled=!0)}}module.exports=function(fn){return raf.call(root,fn)},module.exports.cancel=function(){caf.apply(root,arguments)},module.exports.polyfill=function(object){object||(object=root),object.requestAnimationFrame=raf,object.cancelAnimationFrame=caf}}).call(this,__webpack_require__("c8ba"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,